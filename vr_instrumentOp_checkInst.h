//file generated by ./generateOpImpl.py
static Bool vr_IsInstrumentedOp (IROp op) {
    Bool res;
    res=False;
    switch(op){
    case Iop_AddF64:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_DBL, VR_VEC_SCAL);
      break;
    case Iop_SubF64:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_DBL, VR_VEC_SCAL);
      break;
    case Iop_AddF32:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_FLT, VR_VEC_SCAL);
      break;
    case Iop_SubF32:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_FLT, VR_VEC_SCAL);
      break;
    case Iop_MulF64:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_DBL, VR_VEC_SCAL);
      break;
    case Iop_DivF64:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_DBL, VR_VEC_SCAL);
      break;
    case Iop_MulF32:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_FLT, VR_VEC_SCAL);
      break;
    case Iop_DivF32:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_FLT, VR_VEC_SCAL);
      break;
    case Iop_Add64F0x2:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_DBL, VR_VEC_LLO);
      break;
    case Iop_Sub64F0x2:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_DBL, VR_VEC_LLO);
      break;
    case Iop_Add32F0x4:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_FLT, VR_VEC_LLO);
      break;
    case Iop_Sub32F0x4:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_FLT, VR_VEC_LLO);
      break;
    case Iop_Mul64F0x2:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_DBL, VR_VEC_LLO);
      break;
    case Iop_Div64F0x2:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_DBL, VR_VEC_LLO);
      break;
    case Iop_Mul32F0x4:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_FLT, VR_VEC_LLO);
      break;
    case Iop_Div32F0x4:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_FLT, VR_VEC_LLO);
      break;
    case Iop_Add64Fx2:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_DBL, VR_VEC_FULL2);
      break;
    case Iop_Sub64Fx2:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_DBL, VR_VEC_FULL2);
      break;
    case Iop_Add64Fx4:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_DBL, VR_VEC_FULL4);
      break;
    case Iop_Sub64Fx4:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_DBL, VR_VEC_FULL4);
      break;
    case Iop_Add32Fx4:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_FLT, VR_VEC_FULL4);
      break;
    case Iop_Sub32Fx4:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_FLT, VR_VEC_FULL4);
      break;
    case Iop_Add32Fx8:
          res= vr_isInstrumented_hard(VR_OP_ADD, VR_PREC_FLT, VR_VEC_FULL8);
      break;
    case Iop_Sub32Fx8:
          res= vr_isInstrumented_hard(VR_OP_SUB, VR_PREC_FLT, VR_VEC_FULL8);
      break;
    case Iop_Mul64Fx2:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_DBL, VR_VEC_FULL2);
      break;
    case Iop_Div64Fx2:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_DBL, VR_VEC_FULL2);
      break;
    case Iop_Mul64Fx4:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_DBL, VR_VEC_FULL4);
      break;
    case Iop_Div64Fx4:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_DBL, VR_VEC_FULL4);
      break;
    case Iop_Mul32Fx4:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_FLT, VR_VEC_FULL4);
      break;
    case Iop_Div32Fx4:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_FLT, VR_VEC_FULL4);
      break;
    case Iop_Mul32Fx8:
          res= vr_isInstrumented_hard(VR_OP_MUL, VR_PREC_FLT, VR_VEC_FULL8);
      break;
    case Iop_Div32Fx8:
          res= vr_isInstrumented_hard(VR_OP_DIV, VR_PREC_FLT, VR_VEC_FULL8);
      break;
    case Iop_MAddF32:
#ifndef IGNOREFMA
          res= vr_isInstrumented_hard(VR_OP_MADD, VR_PREC_FLT, VR_VEC_UNK);
#endif //IGNOREFMA
      break;
    case Iop_MAddF64:
#ifndef IGNOREFMA
          res= vr_isInstrumented_hard(VR_OP_MADD, VR_PREC_DBL, VR_VEC_UNK);
#endif //IGNOREFMA
      break;
    case Iop_MSubF32:
#ifndef IGNOREFMA
          res= vr_isInstrumented_hard(VR_OP_MSUB, VR_PREC_FLT, VR_VEC_UNK);
#endif //IGNOREFMA
      break;
    case Iop_MSubF64:
#ifndef IGNOREFMA
          res= vr_isInstrumented_hard(VR_OP_MSUB, VR_PREC_DBL, VR_VEC_UNK);
#endif //IGNOREFMA
      break;
    case Iop_F64toF32:
          res= vr_isInstrumented_hard(VR_OP_CONV, VR_PREC_DBL_TO_FLT, VR_VEC_UNK);
      break;
    case Iop_SqrtF64:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_DBL, VR_VEC_SCAL);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt64F0x2:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_DBL, VR_VEC_LLO);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt64Fx2:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_DBL, VR_VEC_FULL2);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt64Fx4:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_DBL, VR_VEC_FULL4);
#endif //IGNORESQRT
      break;
    case Iop_SqrtF32:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_FLT, VR_VEC_SCAL);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt32F0x4:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_FLT, VR_VEC_LLO);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt32Fx4:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_FLT, VR_VEC_FULL4);
#endif //IGNORESQRT
      break;
    case Iop_Sqrt32Fx8:
#ifndef IGNORESQRT
          res= vr_isInstrumented_hard(VR_OP_SQRT, VR_PREC_FLT, VR_VEC_FULL8);
#endif //IGNORESQRT
      break;
    case Iop_F64toI64S:
      break;
    case Iop_F64toI64U:
      break;
    case Iop_F64toI32S:
      break;
    case Iop_F64toI32U:
      break;
    case Iop_Max32Fx4:
      break;
    case Iop_Max32F0x4:
      break;
    case Iop_Max64Fx2:
      break;
    case Iop_Max64F0x2:
      break;
    case Iop_Min32Fx4:
      break;
    case Iop_Min32F0x4:
      break;
    case Iop_Min64Fx2:
      break;
    case Iop_Min64F0x2:
      break;
    case Iop_Add32Fx2:
      break;
    case Iop_Sub32Fx2:
      break;
    case Iop_CmpF64:
      break;
    case Iop_CmpF32:
      break;
    case Iop_F32toF64:
      break;
    case Iop_CmpEQ64Fx2:
      break;
    case Iop_CmpLT64Fx2:
      break;
    case Iop_CmpLE64Fx2:
      break;
    case Iop_CmpUN64Fx2:
      break;
    case Iop_CmpEQ64F0x2:
      break;
    case Iop_CmpLT64F0x2:
      break;
    case Iop_CmpLE64F0x2:
      break;
    case Iop_CmpUN64F0x2:
      break;
    case Iop_CmpEQ32Fx4:
      break;
    case Iop_CmpLT32Fx4:
      break;
    case Iop_CmpLE32Fx4:
      break;
    case Iop_CmpUN32Fx4:
      break;
    case Iop_CmpGT32Fx4:
      break;
    case Iop_CmpGE32Fx4:
      break;
    case Iop_ReinterpF64asI64:
    case Iop_ReinterpI64asF64:
    case Iop_ReinterpF32asI32:
    case Iop_ReinterpI32asF32:
    case Iop_NegF64:
    case Iop_NegF32:
    case Iop_AbsF64:
    case Iop_AbsF32:
    case Iop_Abs64Fx2:
    case Iop_Neg64Fx2:
      break;
    case Iop_SqrtF128:
    case Iop_Sqrt16Fx8:
    case Iop_AddF64r32:
    case Iop_SubF64r32:
    case Iop_MulF64r32:
    case Iop_DivF64r32:
    case Iop_MAddF64r32:
    case Iop_MSubF64r32:
    case Iop_AddF128:
    case Iop_SubF128:
    case Iop_MulF128:
    case Iop_DivF128:
    case Iop_AtanF64:
    case Iop_Yl2xF64:
    case Iop_Yl2xp1F64:
    case Iop_PRemF64:
    case Iop_PRemC3210F64:
    case Iop_PRem1F64:
    case Iop_PRem1C3210F64:
    case Iop_ScaleF64:
    case Iop_SinF64:
    case Iop_CosF64:
    case Iop_TanF64:
    case Iop_2xm1F64:
    case Iop_RSqrtEst5GoodF64:
    case Iop_Log2_64Fx2:
    case Iop_Scale2_64Fx2:
    case Iop_RecipEst64Fx2:
    case Iop_RecipStep64Fx2:
    case Iop_RSqrtEst64Fx2:
    case Iop_RSqrtStep64Fx2:
    case Iop_RecipStep32Fx4:
    case Iop_RSqrtEst32Fx4:
    case Iop_RSqrtStep32Fx4:
    case Iop_RecipEst32F0x4:
    case Iop_RSqrtEst32F0x4:
    case Iop_Scale2_32Fx4:
    case Iop_Log2_32Fx4:
    case Iop_Exp2_32Fx4:
    case Iop_RSqrtEst32Fx8:
    case Iop_RecipEst32Fx8:
    case Iop_RoundF64toF64_NEAREST:
    case Iop_RoundF64toF64_NegINF:
    case Iop_RoundF64toF64_PosINF:
    case Iop_RoundF64toF64_ZERO:
    case Iop_F32toF16x4:
    case Iop_F16toF32x4:
    case Iop_F16toF64x2:
    case Iop_F128toF64:
    case Iop_F128toF32:
    case Iop_F64toI16S:
    case Iop_CmpF128:
    case Iop_PwMax32Fx4:
    case Iop_PwMin32Fx4:
      break;
    default:
      break;
    }

    return res;
}
