#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   F. Févotte <francois.fevotte@edf.fr>
#   B. Lathuilière <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import sys
import os
import subprocess
from valgrind import dd_config
from valgrind import DD_stoch
from valgrind import DD_exec_stat



import re

#adapatation from  https://stackoverflow.com/questions/12643009/regular-expression-for-floating-point-numbers
regExpFloat="([+-]?(?:\d+([.]\d*)(?:[eE][+-]?\d+)?|[.]\d+(?:[eE][+-]?\d+)?))"
regFloatCompiled=re.compile(regExpFloat)

regExpAddr8="0x[0-9a-fA-F]{8}"
regAddr8Compiled=re.compile(regExpAddr8)
regExpAddr10="0x[0-9a-fA-F]{10}"
regAddr10Compiled=re.compile(regExpAddr10)



def floatReplace(lineStr):
    return regFloatCompiled.sub("*",lineStr)

def addrReplace(lineStr):
    res=regAddr10Compiled.sub("0x??????????",lineStr)
    res=regAddr8Compiled.sub("0x????????",res)
    return res


class DDstdout(DD_stoch.DDStoch):
    def __init__(self, config):
        DD_stoch.DDStoch.__init__(self, config, parseRef=self.selectFloatTask)
        if config.hardOrSoft=="hard":
            self.startCmd="start"
            self.stopCmd="stop"
        else:
            self.startCmd="start_soft"
            self.stopCmd="stop_soft"

    def newLdPreload(self):
        res="verrouUnbuffered.so"
        if "LD_PRELOAD" in os.environ:
            res+=(":"+os.environ["LD_PRELOAD"])
        return res

    def filePathReplace(self,strLine):
        cachePath=self.config_.get_cacheRep()
        return strLine.replace(os.path.join(cachePath, "ref"),os.path.join(cachePath, "*"))

    def selectFloatTask(self,logFile):
        filterResPattern="match(filtered): "
        currentTask=None
        taskRes=[]
        if self.config_.customSearchSpace!=None:
            return [task.replace("\n","") for task in (open(self.config_.customSearchSpace)).readlines()]

        shift=self.config_.get_ioMatchHeaderShift()
        taskPattern="match ["+str(shift)+"]: "
        fpInstrPattern="fp_instr: "
        taskName=None
        fileHandler= open(logFile)
        line=fileHandler.readline()
        while line!="":
            if line.startswith(taskPattern):
                if not self.config_.get_filterCmd() in [None,""]:
                    newLine=fileHandler.readline()
                    taskName=newLine[len(filterResPattern):]
                else:
                    taskName=line[len(taskPattern):]

                if taskName.endswith("\n"):
                    taskName=taskName[0:-1]
            if line.startswith(fpInstrPattern):
                if taskName==None:
                    if len(taskRes)==0:
                        taskName="__verrou__stdout__init__"
                    else:
                        print("Failure selectFloatTask")
                        sys.exit(42)
                nbInstr=int(line[len(fpInstrPattern):])
                if nbInstr!=0:
                    taskName=self.filePathReplace(addrReplace(floatReplace(taskName)))
                    if not (taskName in taskRes):
                        taskRes+=[taskName]
            line=fileHandler.readline()

        #move to the end several expr which match almost evrything
        taskEnd=[" *","\t*","?*","*?","*"]
        for task in taskEnd:
            if task in taskRes:
                taskRes.remove(task)
                taskRes.append(task)
        return taskRes



    def referenceRunEnv(self):
        refPath=os.path.join(self.ref_, "vr_iomatch_ref.txt")
        refFile=open(refPath,"w")

        refFile.write("verbose: 2\n")
        refFile.write("dump-stdout: \n")
        refFile.write(self.config_.get_ioMatchHeader()+"\n")

        if not self.config_.get_filterCmd() in [None,""]:
            refFile.write("filter_line_exec: "+self.config_.get_filterCmd()+"\n")
            refFile.write("dump-filtered-stdout: \n")

        if self.config_.get_ignoreEmptyLine():
            refFile.write("ignore-empty-line: true\n")
        else:
            refFile.write("ignore-empty-line: false\n")

        refFile.write("post-init: nb_instr\n")
        if self.config_.get_ignoreEmptyLine():
            refFile.write("bmatch: ?*\n")
        else:
            refFile.write("bmatch: *\n")
        refFile.write("apply: reset_counter\n")
        refFile.write("post-apply: nb_instr\n")
        refFile.close()
        res= {"PYTHONUNBUFFERED": "x",
              "LD_PRELOAD": self.newLdPreload(),
              "VERROU_ROUNDING_MODE": self.config_.referenceRounding,
              "VERROU_MCA_MODE": "ieee",
              "VERROU_IOMATCH_CLR":refPath,
              "VERROU_OUTPUT_IOMATCH_REP":self.ref_,
              "VERROU_COUNT_OP":"yes",
              }
        filePattern=self.config_.get_file_pattern()
        if filePattern!=None:
            res["VERROU_IOMATCH_FILE_PATTERN"]=filePattern
        return res


    def isFileValidToMerge(self, name):
        return name.startswith("IOMatch.log-")

    def getDeltaFileName(self):
        return "dd.IOMatch"


    def genExcludeIncludeFile(self, dirname, deltas, include=False, exclude=False):
        """Generate the *.exclude and *.include file in dirname rep from deltas"""
        excludes=self.getDelta0()
        dd=self.getDeltaFileName()

        unknownTask=self.config_.get_unknownTask()

        if not unknownTask in ["stop","start","previous"]:
            print("error unknownTask:", unknownTask)

        with open(os.path.join(dirname,"vr_iomatch.txt"), "w") as f:
            f.write(self.config_.get_ioMatchHeader()+"\n")

            f.write("verbose: 2\n")
            f.write("dump-stdout: \n" )
            if not self.config_.get_filterCmd() in [None,""]:
                f.write("filter_line_exec: "+self.config_.get_filterCmd()+"\n")
                f.write("dump-filtered-stdout: \n")
            if self.config_.get_ignoreEmptyLine():
                f.write("ignore-empty-line: true\n")
            else:
                f.write("ignore-empty-line: false\n")
            if "__verrou__stdout__init__" in excludes:
                if "__verrou__stdout__init__" in deltas:
                    f.write("init: %s\n"%(self.startCmd))
                    if unknownTask in ["stop"]:
                        f.write("post-init: %s\n"%(self.stopCmd))
                else:
                    f.write("init: stop\n" )
                    if unknownTask in ["start"]:
                        f.write("post-init: %s\n"%(self.startCmd))
            for line in excludes:
                if line=="__verrou__stdout__init__":
                    continue
                f.write("bmatch: "+ line+"\n")
                if line in deltas:
                    f.write("apply: %s\n"%(self.startCmd))
                    if unknownTask in ["stop"]:
                        f.write("post-apply: %s\n"%(self.stopCmd))
                else:
                    f.write("apply: %s\n"%(self.stopCmd))
                    if unknownTask in ["start"]:
                        f.write("post-apply: %s\n"%(self.startCmd))

        if include:
            with open(os.path.join(dirname,dd+".include"), "w") as f:
                for d in deltas:
                    f.write(d+"\n")

        if exclude:
            with open(os.path.join(dirname,dd+".exclude"), "w") as f:
                for d in deltas:
                    excludes.remove(d)

                for line in excludes:
                    f.write(line+"\n")

    def sampleRunEnv(self,dirName):
        res={"PYTHONUNBUFFERED": "x",
             "LD_PRELOAD": self.newLdPreload(),
             "VERROU_IOMATCH_CLR": os.path.join(dirName, "vr_iomatch.txt"),
             "VERROU_OUTPUT_IOMATCH_REP":os.path.join(dirName,"%DDRUN%"),
             "VERROU_LIBM_NOINST_ROUNDING_MODE":self.config_.referenceRounding,
        }
        filePattern=self.config_.get_file_pattern()
        if filePattern!=None:
            res["VERROU_IOMATCH_FILE_PATTERN"]=filePattern
        return res

    def coerce(self, delta_config):
        return "\n "+" \n ".join(["|%s|"%e for e in [l.strip() for l in delta_config ]])
#        return  "\n  " + "\n  ".join(["%s:%d (%s)" % e for e in
#                                      [(col[0], int(col[1]), self.demangle(col[2])) for col in
#                                       [(l.strip()+"\t\t").split("\t") for l in delta_config]]])


class stdoutConfig(dd_config.ddConfig):

    def __init__(self, argv, environ,config_keys=["INTERFLOP_DD","VERROU_DD"]):
        super().__init__(argv,environ,config_keys,prefix="dd.stdout")
        self.instr_prefix="VERROU"

    def registerOptions(self):
        super().registerOptions()
        self.addRegistry("unknownTask", "string", "UNKNOWN_TASK",["--unknown-task="],"previous",["previous","stop","start"] )
        self.addRegistry("ignoreEmptyLine", "bool", "IGNORE_EMPTY_LINE",["--ignore-empty-line="],True, None )
        self.addRegistry("filterCmd", "string", "FILTER_CMD",["--filter-cmd="],None, None )
        self.addRegistry("ioMatchHeaderFile", "string", "IOMATCH_HEADER",["--IOmatch-header="], None, "file_exists")
        self.addRegistry("customSearchSpace", "string", "CUSTOM_SEARCH_SPACE",["--custom-search-space="], None, "file_exists")
        self.addRegistry("filePattern", "string", "FILE_PATTERN",["--file-pattern="], None, None)
        self.addRegistry("referenceRounding", "string", "REFERENCE_ROUNDING",["--reference-rounding="],"native",["native","nearest"] )
        self.addRegistry("hardOrSoft", "string", "STOP_START",["--stop_start="],"hard",["hard","soft"] )

    def normalizeOptions(self):
        super().normalizeOptions()
        self.normalizeIOMatchHeader()

    def normalizeIOMatchHeader(self):
        self.shiftMatch=0
        if self.ioMatchHeaderFile==None:
            self.ioMatchHeader=""
        else:
            lines=(open(self.ioMatchHeaderFile)).readlines()
            lines=[line.replace("\n","") for line in lines]
            error=False
            for line in lines:
                if not ":" in line:
                    print("IOMatch header need a : separator")
                    error=True
                    break
                if line.startswith("bmatch:"):
                    self.shiftMatch+=1
                    continue
                if line.startswith("cmatch:"):
                    self.shiftMatch+=1
                    continue
                if line.startswith("apply: ") or line.startswith("post-apply: ") or line.startswith("default"):
                    value=line.split(" ")[1].replace("\n","")
                    correctValueTab=["nop","default",
                                     "stop","start","stop_stop","start_stop",
                                     "init","post_init",
                                     "panic","exit", "nb_instr",
                                     "display_counter","dump_cover"]
                    if value in correctValueTab:
                        continue
                    else:
                        error=True
                        print("IOMatch header : invalid value : ", value )
                        print("value need to be in ", correctValueTab)

                        break
                error=True
                break

            if error:
                print("invalid line: ", line)
                print("%s should be a correct expect header file"%self.iomatchHeaderFile )
                sys.exit(42)

            self.ioMatchHeader="\n".join(lines)

    def get_unknownTask(self):
        return self.unknownTask

    def get_ignoreEmptyLine(self):
        return self.ignoreEmptyLine

    def get_filterCmd(self):
        return self.filterCmd

    def get_ioMatchHeader(self):
        return self.ioMatchHeader

    def get_ioMatchHeaderShift(self):
        return self.shiftMatch

    def get_file_pattern(self):
        return self.filePattern

if __name__ == "__main__":

    config=stdoutConfig(sys.argv,os.environ)
    et=DD_exec_stat.exec_stat(config.get_cacheRep())
    dd = DDstdout(config)
    dd.run()
    et.terminate()
