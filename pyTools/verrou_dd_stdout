#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   F. Févotte <francois.fevotte@edf.fr>
#   B. Lathuilière <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import sys
import os
import subprocess
from valgrind import dd_config
from valgrind import DD_stoch
from valgrind import DD_exec_stat



import re

#adapatation from  https://stackoverflow.com/questions/12643009/regular-expression-for-floating-point-numbers
regExpFloat="([+-]?(?:\d+([.]\d*)(?:[eE][+-]?\d+)?|[.]\d+(?:[eE][+-]?\d+)?))"
regFloatCompiled=re.compile(regExpFloat)

regExpAddr8="0x[0-9a-fA-F]{8}"
regAddr8Compiled=re.compile(regExpAddr8)
regExpAddr10="0x[0-9a-fA-F]{10}"
regAddr10Compiled=re.compile(regExpAddr10)



def floatReplace(lineStr):
    return regFloatCompiled.sub("*",lineStr)

def addrReplace(lineStr):
    res=regAddr10Compiled.sub("0x??????????",lineStr)
    res=regAddr8Compiled.sub("0x????????",res)
    return res


class DDstdout(DD_stoch.DDStoch):
    def __init__(self, config):
        DD_stoch.DDStoch.__init__(self, config, parseRef=self.selectFloatTask)

    def selectFloatTask(self,logFile):
        currentTask=None
        taskRes=[]
        if self.config_.customSearchSpace!=None:
            return [task.replace("\n","") for task in (open(self.config_.customSearchSpace)).readlines()]

        taskPattern="match [0]: "
        fpInstrPattern="fp_instr: "
        taskName=None
        for line in open(logFile).readlines():
            if line.startswith(taskPattern):
                taskName=line[len(taskPattern):]
                if taskName.endswith("\n"):
                    taskName=taskName[0:-1]
            if line.startswith(fpInstrPattern):
                if taskName==None:
                    if len(taskRes)==0:
                        taskName="__verrou__stdout__init__"
                    else:
                        print("Failure selectFloatTask")
                        sys.exit(42)
                nbInstr=int(line[len(fpInstrPattern):])
                if nbInstr!=0:
                    taskName=addrReplace(floatReplace(taskName))
                    if not (taskName in taskRes):
                        taskRes+=[taskName]

        return taskRes



    def referenceRunEnv(self):
        refPath=os.path.join(self.ref_, "vr_expect_ref.txt")
        refFile=open(refPath,"w")
#        refFile.write(self.config_.get_expectHeader())
        refFile.write("verbose: 1\n")
        refFile.write("dump-stdout:\n")
        if not self.config_.get_filterCmd() in [None,""]:
            refFile.write("filter_line_exec: "+self.config_.get_filterCmd()+"\n")
            refFile.write("dump-filtered-stdout:\n")

        if self.config_.get_ignoreEmptyLine():
            refFile.write("ignore-empty-line: true\n")
        else:
            refFile.write("ignore-empty-line: false\n")

        refFile.write("post-init: nb_instr\n")
        if self.config_.get_ignoreEmptyLine():
            refFile.write("match: ?*\n")
        else:
            refFile.write("match: *\n")
        refFile.write("apply: reset_counter\n")
        refFile.write("post-apply: nb_instr\n")
        refFile.write("begin:\n")
        refFile.close()
        return {"PYTHONUNBUFFERED": "x",
                "VERROU_ROUNDING_MODE": "nearest",
                "VERROU_MCA_MODE": "ieee",
                "VERROU_EXPECT_CLR":refPath}

    def isFileValidToMerge(self, name):
        return name.startswith("vr_expect_ref.txt.log-")

    def getDeltaFileName(self):
        return "dd.expect"


    def genExcludeIncludeFile(self, dirname, deltas, include=False, exclude=False):
        """Generate the *.exclude and *.include file in dirname rep from deltas"""
        excludes=self.getDelta0()
        dd=self.getDeltaFileName()

        unknownTask=self.config_.get_unknownTask()

        if not unknownTask in ["stop","start","previous"]:
            print("error unknownTask:", unknownTask)

        with open(os.path.join(dirname,"vr_expect.txt"), "w") as f:
            f.write(self.config_.get_expectHeader())

            f.write("verbose: 1\n")
            f.write("dump-stdout:\n")
            if not self.config_.get_filterCmd() in [None,""]:
                f.write("filter_line_exec: "+self.config_.get_filterCmd()+"\n")
                f.write("dump-filtered-stdout:\n")

            if self.config_.get_ignoreEmptyLine():
                f.write("ignore-empty-line: true\n")
            else:
                f.write("ignore-empty-line: false\n")
            if "__verrou__stdout__init__" in excludes:
                if "__verrou__stdout__init__" in deltas:
                    f.write("init: start\n")
                    if unknownTask in ["stop"]:
                        f.write("post-init: stop\n")
                else:
                    f.write("init: stop\n" )
                    if unknownTask in ["start"]:
                        f.write("post-init: start\n")
            for line in excludes:
                if line=="__verrou__stdout__init__":
                    continue
                f.write("match: "+ line+"\n")
                if line in deltas:
                    f.write("apply: start\n")
                    if unknownTask in ["stop"]:
                        f.write("post-apply: stop\n")
                else:
                    f.write("apply: stop\n")
                    if unknownTask in ["start"]:
                        f.write("post-apply: start\n")
            f.write("begin:\n")

        if include:
            with open(os.path.join(dirname,dd+".include"), "w") as f:
                for d in deltas:
                    f.write(d+"\n")

        if exclude:
            with open(os.path.join(dirname,dd+".exclude"), "w") as f:
                for d in deltas:
                    excludes.remove(d)

                for line in excludes:
                    f.write(line+"\n")

    def sampleRunEnv(self,dirName):
        return {"PYTHONUNBUFFERED": "x",
                "VERROU_EXPECT_CLR": os.path.join(dirName, "vr_expect.txt")}

    def coerce(self, delta_config):
        return "\n "+" \n ".join(["|%s|"%e for e in [l.strip() for l in delta_config ]])
#        return  "\n  " + "\n  ".join(["%s:%d (%s)" % e for e in
#                                      [(col[0], int(col[1]), self.demangle(col[2])) for col in
#                                       [(l.strip()+"\t\t").split("\t") for l in delta_config]]])


class stdoutConfig(dd_config.ddConfig):

    def __init__(self, argv, environ,config_keys=["INTERFLOP"]):
        super().__init__(argv,environ,config_keys,prefix="dd.stdout")

    def registerOptions(self):
        super().registerOptions()
        self.addRegistry("unknownTask", "string", "DD_UNKNOWN_TASK",["--unknown-task="],"previous",["previous","stop","start"] )
        self.addRegistry("ignoreEmptyLine", "bool", "DD_IGNORE_EMPTY_LINE",["--ignore-empty-line="],True, None )
        self.addRegistry("filterCmd", "string", "DD_FILTER_CMD",["--filter-cmd="],None, None )
        self.addRegistry("expectHeaderFile", "string", "DD_EXPECT_HEADER",["--expect-header="], None, "file_exists")
        self.addRegistry("customSearchSpace", "string", "DD_CUSTOM_SEARCH_SAPCE",["--custom-search-space="], None, "file_exists")

    def normalizeOptions(self):
        super().normalizeOptions()
        self.normalizeExpectHeader()

    def normalizeExpectHeader(self):
        if self.expectHeaderFile==None:
            self.expectHeader=""
        else:
            lines=(open(self.expectHeaderFile)).readlines()
            error=False
            for line in lines:
                if not ":" in line:
                    print("expect header need a : separator")
                    error=True
                    break
                if line.startswith("match:"):
                    continue
                if line.startswith("apply: ") or line.startswith("post-apply: ") or line.startswith("default"):
                    value=line.split(" ")[1].replace("\n","")
                    correctValueTab=["nop","default","stop","start","panic","exit","display_counter"]
                    if value in correctValueTab:
                        continue
                    else:
                        error=True
                        print("expect header : invalid value : ", value )
                        print("value need to be in ", correctValueTab)

                        break
                error=True
                break

            if error:
                print("invalid line: ", line)
                print("%s should be a correct expect header file"%self.expectHeaderFile )
                sys.exit(42)

            self.expectHeader="\n".join(lines)

    def get_unknownTask(self):
        return self.unknownTask

    def get_ignoreEmptyLine(self):
        return self.ignoreEmptyLine

    def get_filterCmd(self):
        return self.filterCmd

    def get_expectHeader(self):
        return self.expectHeader

if __name__ == "__main__":

    config=stdoutConfig(sys.argv,os.environ, ["INTERFLOP","VERROU"])
    et=DD_exec_stat.exec_stat(config.get_cacheRep())
    dd = DDstdout(config)
    dd.run()
    et.terminate()
