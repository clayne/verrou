#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2024 EDF
#   B. Lathuili√®re <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.


import sys
import os
import shutil
import copy
from pathlib import Path

class DDClean:
    def __init__(self, prefix):
        self.prefix_=Path(prefix).absolute()

    def searchSymLink(self):
        """Return the list of symlink (created by DD_stoch) in the cache"""
        res = list(self.prefix_.glob("ddmin*"))
        res +=[self.prefix_ / sym for sym in ["rddmin-cmp","ddmax","ddmax-cmp","FullPerturbation","NoPerturbation"]]
        return [ x for x in res if x.is_symlink()]

    def clean(self, dryRun):
        symLinkTab=self.searchSymLink()
        if len(symLinkTab)==0:
            print("is %s a verrou_dd rep?"%(self.prefix_))
            return

        repToKeep=[Path(os.readlink(x)).name for x in symLinkTab]

        #loop over rep with md5 format
        for md5rep in [x for x in self.prefix_.glob("[a-f0-9]"*32) if x.is_dir()]:
            if not md5rep.name in repToKeep:
                if not dryRun:
                    print("remove: %s"%(md5rep))
                    shutil.rmtree(md5rep)
                    pass
                else:
                    print("[dry]remove: %s"%(md5rep))
            else:
                print("keep: %s"%(md5rep))

def help():
    print(sys.argv[0] +" [rep]" + " [--dry-run,--help]")
    sys.exit(42)


if __name__=="__main__":
    dryRun=False
    argv=copy.deepcopy(sys.argv)
    if "--help" in sys.argv:
        help()
    if "--dry-run" in sys.argv:
        dryRun=True
        argv.remove("--dry-run")

    path="."
    if len(argv)==2:
        path=argv[1]
    elif len(argv)==1:
        pass
    else:
        help()

    ddCleanTool=DDClean(path)
    ddCleanTool.clean(dryRun)
