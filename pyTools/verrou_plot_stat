#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   B. Lathuili√®re <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import numpy
import matplotlib.pyplot as plt
import sys
import os
import copy
import subprocess
import getopt
import functools
import glob
import math

maxNbPROC=None

from valgrind import DD_stoch

roundingDetTab=["nearest","upward","downward", "toward_zero","farthest","float"]
roundingNonDetTab=["random", "average", "random_det","average_det", "random_comdet","average_comdet"]



def verrou_run_stat(script_run, rep, listOfConfigStat, ref, maxNbPROC=None, seed=None):
    if not os.path.exists(rep):
        os.mkdir(rep)
    listOfStat=copy.deepcopy(listOfConfigStat)
    if listOfConfigStat[ref]==0:
        listOfStat[ref]=1

    listOfMcaKey=[ x  for x in listOfStat.keys()  if x.startswith("mca")  ]
    for roundingMode in roundingNonDetTab+ roundingDetTab+ listOfMcaKey:
        nbSample=listOfStat[roundingMode]

        seedTab=None
        if seed!=None:
            import random
            random.seed(seed)
            seedTab=random.sample(range(0,2**32-1), nbSample)
        if nbSample==0:
            continue
        name=("%s")%(roundingMode)
        envvars={"VERROU_ROUNDING_MODE":roundingMode }
        if roundingMode in roundingDetTab:
            detName=os.path.join(rep,"det")
            if not os.path.exists(detName):
                os.mkdir(detName)
            name=("det/%s")%(roundingMode)
        if roundingMode in listOfMcaKey:
            mcaConfig=roundingMode.split("-")[1:]
            mode=mcaConfig[0]
            doublePrec=mcaConfig[1]
            floatPrec=mcaConfig[2]
            name=("mca/%s_%s_%s")%(mode,doublePrec, floatPrec)
            mcaName=os.path.join(rep,"mca")
            if not os.path.exists(mcaName):
                os.mkdir(mcaName)

            envvars={"VERROU_BACKEND":"mcaquad",
                     "VERROU_MCA_MODE":mode,
                     "VERROU_MCA_PRECISION_DOUBLE": doublePrec,
                     "VERROU_MCA_PRECISION_FLOAT": floatPrec}

        repName=os.path.join(rep,name)
        if not os.path.exists(repName):
            os.mkdir(repName)

        refDir=None
        script_cmp=None

        task=DD_stoch.verrouTask(repName, refDir,script_run, script_cmp ,nbSample, maxNbPROC, envvars , verbose=True, seedTab=seedTab)
        task.run(earlyExit=False)


def run(dicParam):
    print(dicParam["repName"], "begin")
    subProcessRun=runCmdAsync([dicParam["script_run"], dicParam["repName"]],
                              dicParam["output_prefix"],
                              dicParam["env"])
    getResult(subProcessRun)
    print(dicParam["repName"],"end")


def extractLoopOverComputation(rep, listOfStat, extractFunc):

    resDict={}

    listOfMcaKey=[ x  for x in listOfStat.keys()  if x.startswith("mca")  ]
    for roundingMode in roundingNonDetTab+ roundingDetTab+ listOfMcaKey:
        name=("%s")%(roundingMode)
        if roundingMode in roundingDetTab:
            name=("det/%s")%(roundingMode)
        if roundingMode in listOfMcaKey:
            mcaConfig=roundingMode.split("-")[1:]
            mode=mcaConfig[0]
            doublePrec=mcaConfig[1]
            floatPrec=mcaConfig[2]
            name=("mca/%s_%s_%s")%(mode,doublePrec, floatPrec)

        resTab=[]
        nbSample=listOfStat[roundingMode]

        if nbSample==0:
            resDict[roundingMode]=None
            continue
        if nbSample==-1:
            i=0
            while True:
                nameSample=os.path.join(rep,name, "dd.run%i"%(i))
                if os.path.exists(nameSample):
                    value=extractFunc(nameSample)
                    resTab+=[value]
                    i+=1
                else:
                    break

        for i in range(nbSample):
            nameSample=os.path.join(rep,name, "dd.run%i"%(i))

            value=extractFunc(nameSample)
            resTab+=[value]

        resDict[roundingMode]=resTab

    return resDict



def verrou_extract_stat(extract_run, rep, listOfConfigStat, ref, continueOnExtractError):

    listOfStat=copy.deepcopy(listOfConfigStat)
    if listOfConfigStat[ref]==0:
        listOfStat[ref]=1

    def getValueData(repName):
        try:
            return float(subprocess.getoutput(extract_run +" "+ repName))
        except ValueError as err:
            print("Value Error while extracting value from :"+ extract_run +" "+ repName)
            if continueOnExtractError:
                return "fail"
            else:
                sys.exit(42)


    res=extractLoopOverComputation(rep,listOfStat, getValueData)
    res["ref"]=res[ref]
    if "fail" in res["ref"]:
        print("Even with --continue-on-extract-error the reference should not contain error")
        sys.exit()

    if listOfConfigStat[ref]==0:
        res.pop(ref)
    return res

def verrou_extract_specific_pattern(extract_run, rep, listOfPattern, listOfName=None, continueOnExtractError=False):
    def getValueData(repName):
        try:
            return float(subprocess.getoutput(extract_run +" "+ repName))
        except ValueError as err:
            print("Value Error while extracting value from :"+ extract_run +" "+ repName)
            if continueOnExtractError:
                return "fail"
            else:
                sys.exit(42)

    if listOfName==None:
        listOfSplitName=[pattern.split("/") for pattern in listOfPattern ]
        #cleaning begin
        for i in range(len(listOfSplitName[0])):
            listOfName_i=[x[0] for x in listOfSplitName]
            if len(set(listOfName_i))==1:
                   listOfSplitName=[x[1:] for x in listOfSplitName]
            else:
                break
        #cleaning end
        for i in range(len(listOfSplitName[0])):
            listOfName_i=[x[-1] for x in listOfSplitName]
            if len(set(listOfName_i))==1:
                   listOfSplitName=[x[0:-1] for x in listOfSplitName]
            else:
                break
        #name generation
        listOfName=["/".join(x) for x in listOfSplitName]
        for i in range(len(listOfName)):
            if listOfName[i]=="":
                listOfName[i]="pattern"+str(i)
    res={}
    for i  in range(len(listOfPattern)):
        pattern=listOfPattern[i]
        listOfCatchPattern=[n for n in glob.glob(os.path.join(rep,pattern)) if os.path.isdir(n)]

        if len(listOfCatchPattern)==0:
            print("empty pattern :%s/%s"%(rep,pattern))
            sys.exit(42)
        listOfValue=[getValueData(repName) for repName in listOfCatchPattern]

        res[listOfName[i]]=listOfValue
    return res


def verrou_extract_time(extract_time, rep, listOfStat):
    def getTimeData(repName):
        return [float(x) for x in (subprocess.getoutput(extract_time +" "+ repName)).split("\n")]
    return extractLoopOverComputation(rep,listOfStat, getTimeData)


def verrou_extract_var(extract_var, rep, listOfStat):
    def getVarData(repName):
        lines=(subprocess.getoutput(extract_var +" "+ repName)).split("\n")
        keys=lines[0].split()
        counter=0
        res={}
        for line in lines[1:]:
            values=[ float(x) for x in line.split()]
            if len(values)!=len(keys):
                print("invalid result : %(%s)"%(extract_var,repName))
                sys.exit()
            for i in range(len(keys)):
                res[(keys[i],counter)]= values[i]
            counter+=1

        return res
    return extractLoopOverComputation(rep,listOfStat, getVarData)




def prepareDataForParaview(dataTime,dataVar, rep):

    csvTime=open(os.path.join(rep, "paraviewTime.csv"),"w")
    first=True
    for rounding in dataTime:
        tabResult=dataTime[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                if first:
                    csvTime.write("index"+"\t" + "\t".join(["t"+str(t) for t in range(len(tabResult[i]))] ) +"\n")
                    first=False

                csvTime.write(rounding+"-"+str(i) +"\t"+ "\t".join([ str(x) for x in tabResult[i]])+"\n"  )
    csvTime.close()


    #select key
    first =True
    keys=None
    for rounding in dataVar:
        tabResult=dataVar[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                keysLocal=tabResult[i].keys()
                if first:
                    keys=list(keysLocal)
                    first=False
                else:
                    if keys!=list(keysLocal):
                        print("incoherent key")
                        sys.exit()
    keys.sort(key=lambda x:x[0])
    keys.sort(key=lambda x:x[1])

    csvParam=open(os.path.join(rep, "paraviewParam.csv"),"w")
    first=True
    for rounding in dataVar:
        tabResult=dataVar[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                if first:
                    csvParam.write("index"+"\t" + "\t".join([key+"-"+str(t) for (key,t) in keys ]) +"\n")
                    first=False
                csvParam.write(rounding+"-"+str(i) +"\t"+ "\t".join([ str(tabResult[i][x]) for x in keys])+"\n"  )
    csvParam.close()

def runParaview(rep):
    def getScriptPath():
        #the script is at the same place as this script
        return __file__.replace(os.path.basename(sys.argv[0]),"paraview_script.py")        

    cmd="paraview --script=%s"%(getScriptPath())
    print("paraview cmd: ", cmd)
    env = copy.deepcopy(os.environ)
    env["VERROU_PARAVIEW_DATA_PATH"]=rep
    process=subprocess.Popen(cmd, env=env, shell=True)

    def paraviewHelp():
        print(""" To enable link selection:
\t1) In Tools/ManageLink... click on Add
\t2) Select Selection Link (last item)
\t3) On left select Objects/TransposeTable1
\t4) On right select Objects/CSVReader2""")
    paraviewHelp()
    process.wait()


def listOfHistogram(listOfBrutData, nb_bin):
    maxValue=max([max([a for a in data if a!=float("inf") if a!="fail"]) for data in listOfBrutData])
    minValue=min([min([a for a in data if a!=float("-inf")if a!="fail"]) for data in listOfBrutData])

    numOfSpecialFloat=[ {"-inf":data.count(float("-inf")), "inf":data.count(float("inf")),"NaN":data.count(float("NaN")),"fail":data.count("fail") } for data in listOfBrutData]
    listOfFilteredBrutData=[[x for x in data if x!=(float("inf")) and x!=(float("-inf")) and x!=float("NaN") and x!="fail"] for data in listOfBrutData  ]

    bins=  (numpy.histogram(listOfFilteredBrutData[0], bins=nb_bin, range=[minValue, maxValue]))[1]
    return bins,listOfFilteredBrutData,numOfSpecialFloat

def plot_hist(data, png=False, relative=False, nb_bin=40):
    if relative!=False:
        plt.rcParams['text.usetex'] = True

    fig, ax = plt.subplots()

    plotWidth=1 #plot variable

    #selection of plot
    listOfScalar=[] # rounding mode plotted with vertical ligne
    listOfTab=[]    # rounding mode plotted with histogram
    #mcaMode=[ x  for x in data.keys()  if x.startswith("mca")  ]
    #verrouMode=["nearest","upward","downward", "toward_zero","farthest","random","average","float"]
#    for roundingMode in verrouMode+mcaMode:
    for roundingMode in sorted([x for x in data.keys() if x!="ref"]):
        if data[roundingMode]==None:
            continue
        if len(data[roundingMode])==1:
            listOfScalar+=[roundingMode]
        if len(data[roundingMode])>1:
            listOfTab+=[roundingMode]

    convert= lambda x :x
    legend= "X"
    if relative!=False:

        if relative in ["nearest", "upward" ,"toward_zero", "farthest"]:
            valueRef=data[relative][0]
            latexName=relative.replace("_","\_")
            legend=r"$\frac{X-X_{%s}}{|X_{%s}|}$"%(latexName,latexName)
        else:
            valueRef=float(relative)
            legend=r"$\frac{X-%s}{|%s|}$"%(relative,relative)
        convert=lambda x:  (x-valueRef) /abs(valueRef)



    #extraction of same dataset size and histogram generation
    size=min([len(data[key]) for key in listOfTab  ])
#    hists=listOfHistogram([[convert(x) for x in data[key][0:size]] for key in listOfTab ])
    bins,datas, numOfSpecialFloat=listOfHistogram([[convert(x) for x in data[key][0:size] ] for key in listOfTab  ], nb_bin)

    lineColor=["orange","sienna","blue","red","green", "black", "purple","yellow"]
    lineColor+=["orange","blue","red","green", "black", "purple","yellow"]

    lineIndex=0

    #plot histogram
    maxHist=0
    name=[]
    name+=listOfTab
    plthandle=[]
    for i in range(len(name)):
        special=numOfSpecialFloat[i]["-inf"] + numOfSpecialFloat[i]["inf"]+numOfSpecialFloat[i]["NaN"]
        fail=numOfSpecialFloat[i]["fail"]
        namei=name[i]
        if special!=0 and fail!=0:
            namei+=" (#Nan/Inf:%i #fail:%i)"%(special, fail)
        if special==0 and fail!=0:
            namei+=" (#fail:%i)"%(fail)
        if special!=0 and fail==0:
            namei+=" (#Nan/Inf:%i)"%(special)

        if plt.rcParams['text.usetex']:
            namei=namei.replace("_","\_")
        handle=plt.hist(datas[i],bins=bins, label=namei, linewidth=plotWidth,  alpha=0.6,color=lineColor[lineIndex])#, linestyle="-")
        lineIndex+=1
        plthandle+=[handle[0]]

    #plot vertical line
    nameDet=listOfScalar
    for mode in nameDet:
        value=convert(data[mode][0])
        #handle=plt.plot([value, value], [0, maxHist] , label=mode, linestyle='--', linewidth=plotWidth, color=lineColor[lineIndex])
        handle=plt.axvline(x=value,linestyle='--', linewidth=plotWidth, color=lineColor[lineIndex])

        modeStr=mode
        if plt.rcParams['text.usetex']:
            modeStr=mode.replace("_","\_")
        plt.text(value, 1., modeStr ,{'ha': 'left', 'va': 'bottom'},color=lineColor[lineIndex], transform=ax.get_xaxis_transform(),rotation=80)

        lineIndex+=1
        #plthandle+=[handle[0]]

#    plt.legend(plthandle, name+nameDet)

    plt.legend()
    plt.grid()
    plt.ylabel("#occurrence")
    if plt.rcParams['text.usetex']:
        plt.ylabel("$\#occurrence$")

    plt.xlabel(legend)

    if png!=False:
        plt.savefig(png,dpi=300,bbox_inches='tight')
    else:
        plt.show()

def maxDiff(tab,ref):
    res=max([abs(x-ref) for x in tab ])
    return res


def computeRelative(estim, refValue):
    if abs(refValue)>=1.e-308:
        estimRel= estim / abs(refValue)
        if estimRel>0:
            estimRelBit= -math.log2(estimRel)
        else:
            estimRelBit=float("Inf")
        return (estimRel, estimRelBit)
    else:
        return (float("NaN"), float("NaN"))

def print_stat(data, ref):
    listOfScalar=[] # rounding mode plotted with vertical ligne
    listOfTab=[]

    for roundingMode in sorted([x for x in data.keys()]):
        if data[roundingMode]==None:
            continue
        if len(data[roundingMode])==1:
            listOfScalar+=[roundingMode]
        if len(data[roundingMode])>1:
            listOfTab+=[roundingMode]

    refValue=None
    if len(data["ref"])==1:
        refValue=data["ref"][0]
    else:
        refValue=numpy.mean(data["ref"])
    print("\nrefValue[%s] : %.17e"%(ref,refValue))
    print("estimator\tabs\trel\trel(in bit)")
    maxEstim=0
    nbTotalError=0
    nbTotalSample=0
    for rounding in listOfTab:
        if not "fail" in data[rounding]:
            nbTotalSample+=len(data[rounding])
            estim=    maxDiff(data[rounding],refValue)
            maxEstim=max(estim,maxEstim)
            estimRel, estimRelBit=computeRelative(estim, refValue)
            print("%s:\t%e\t%.4e\t%.2fbit"%(rounding, estim,estimRel, estimRelBit))
        else:
            nbError=data[rounding].count("fail")
            nbTotalError+=nbError
            nbTotalSample+=len(data[rounding])
            if nbError==len(data):
                print("%s (100\% fail) :"%(rounding))
            else:
                estim=    maxDiff([x for x in data[rounding] if x!="fail"],refValue)
                maxEstim=max(estim,maxEstim)
                estimRel, estimRelBit=computeRelative(estim, refValue)
                print("%s (%.1f%% fail) :\t%e\t%.4e\t%.2fbit"%(rounding, 100.*nbError/float(len(data)) ,estim,estimRel, estimRelBit))

    for rounding in listOfScalar:

        nbError=data[rounding].count("fail")
        nbTotalError+=nbError
        nbTotalSample+=len(data[rounding])
        if nbError==0:
            estim=    maxDiff(data[rounding],refValue)
            maxEstim=max(estim,maxEstim)
        else:
            print("Warning %s failing")
    estimRel, estimRelBit=computeRelative(maxEstim, refValue)
    if nbTotalError==0:
        print("%s:\t%e\t%.4e\t%.2fbit"%("all", maxEstim,estimRel, estimRelBit))
    else:
        print("%s (%.1f%% fail) :\t%e\t%.4e\t%.2fbit"%("all", 100.*nbTotalError/float(nbTotalSample),maxEstim,estimRel, estimRelBit))


class config_stat:
    def __init__(self, argv):
        self.isMontcarlo=False
        self._nbSample=None
        self._rep=None
        self._defaultRep="verrou.stat"
        self.listMCA=[]
        self.defaultRoundingTab=["random","average","det"]
        self.roundingTab=[]

        self.png=False
        self._hist=True
        self._time=False
        self._num_threads=None
        self._relative=False
        self._pattern=[]
        self._runOnly=False
        self._ref="nearest"
        self._noPlot=False
        self._nbBin=40
        self._seed=None
        self._continueOnExtractError=False
        self.parseOpt(argv[1:])

        if len(self._pattern)!=0 and (self.isMontcarlo==True or self._nbSample!=None or self._time==True):
            print("--specific-pattern is incompatible with montecarlo, samples and time options")
            self.failure()

        if self._nbSample==None:
            self._nbSample=100
        if self._rep==None:
            if len(self._pattern)!=0:
                self._rep="."
            else:
                self._rep=self._defaultRep


    def parseOpt(self,argv):
        try:
            opts,args=getopt.getopt(argv, "thms:r:p:",["time","help","montecarlo","run-only", "no-plot", "samples=","seed=","rep=", "nb-bin=","ref=","png=", "mca=","rounding-list=", "num-threads=", "relative=", "specific-pattern=", "continue-on-extract-error"])
        except getopt.GetoptError:
            self.help()
            print("argv:", argv)
            self.failure()

        for opt, arg in opts:
            if opt in ("-h","--help"):
                self.help()
                sys.exit()
            if opt in ("-t","--time"):
                self._time=True
                self._hist=False
                continue
            if opt in ("-m","--montecarlo"):
                self.isMontcarlo=True
                continue
            if opt in ("--run-only"):
                self._runOnly=True
                continue
            if opt in ("-s","--samples"):
                self._nbSample=int(arg)
                continue
            if opt in ("--seed"):
                self._seed=int(arg)
                continue
            if opt in ("--num-threads"):
                self._num_threads=int(arg)
                continue
            if opt in ("-r","--rep"):
                self._rep=arg
                continue
            if opt in ("--relative"):
                self._relative=arg
                continue
            if opt in ("-p","--png"):
                self.png=arg
                continue
            if opt in ["--specific-pattern"]:
                self._pattern+=[arg]
                continue
            if opt in ["--rounding-list"]:
                self.roundingTab+=arg.split(",")
                continue
            if opt in ["--ref"]:
                self._ref=arg
                continue
            if opt in ["--nb-bin"]:
                self._nbBin=int(arg)
                continue
            if opt in ["--no-plot"]:
                self._noPlot=True
                continue
            if opt in ["--continue-on-extract-error"]:
                self._continueOnExtractError=True
                continue
            if opt in ("--mca",):
                if arg=="":
                    self.listMCA+=["rr-53-24"]
                else:
                    argSplit=arg.split("-")
                    if len(argSplit)!=3:
                        print("invalid mca format : invalid number of \"-\"")
                        self.help()
                        self.failure()
                    else:
                        if not (argSplit[0] in ["rr","pb","mca"]):
                            print("invalid mca format : first element shoukld be in [\"rr\",\"pb\",\"mca\"]")
                            self.help()
                            self.failure()
                        try:
                            a=int(argSplit[1])
                            b=int(argSplit[2])
                        except:
                            print("invalid mca format : two last parameter should be integer")
                            self.help()
                            self.failure()
                    self.listMCA+=["mca-"+arg]
                continue
            print("unknown option :", opt)

        if self.roundingTab==[]:
            self.roundingTab=self.defaultRoundingTab
        if "det" in self.roundingTab:
            self.roundingTab.remove("det")
            self.roundingTab+=[x for x in roundingDetTab if x!="float"]

#        print("rounding list :", self.roundingTab)

        if self.run_only():
            if len(args)==1:
                self._runScript=self.checkScriptPath(args[0])
            if len(args)>1:
                self.help()
                self.failure()
            return

        if self._hist and len(self._pattern)==0:
            if len(args)>2:
                self.help()
                self.failure()
            if len(args)==2:
                self._runScript=self.checkScriptPath(args[0])
                self._extractScript=self.checkScriptPath(args[1])
            if len(args)==1:
                self._runScript=None
                self._extractScript=self.checkScriptPath(args[0])

        if len(self._pattern)!=0:
            if len(args)>1:
                self.help()
                self.failure()
            self._extractScript=self.checkScriptPath(args[0])
            self._runScript=None
        if self._time:
            if len(args)>3:
                self.help()
                self.failure()
            self._runScript=self.checkScriptPath(args[0])
            self._extractTimeScript=self.checkScriptPath(args[1])
            self._extractVarScript=self.checkScriptPath(args[2])

    def help(self):
        name=sys.argv[0]
        print( "%s [options] run.sh extract.sh or %s -t[or --time] [options] run.sh extractTime.sh extractVar.sh "%(name,name)  )
        print( "\t -r --rep=:  working directory [default verrou.stat]")
        print( "\t -s --samples= : number of samples [default 100] -1 means use what available without use run.sh")
        print( "\t --num-threads= : number of parallel run")
        print( "\t --run-only : only run  neither plot histogramm nor print stat ")
        print( "\t --no-plot : do not plot hist (ie. print stat only)")
        print( "\t --nb-bin= : number of bins for histogram [default 40] ")

        print( "\t --rounding-list= : rounding modes (separated by coma) det aliases the list [nearest,upward,downward,toward_zero,farthest]. [default det, random, average]")
        print( "\t --relative= : float or value in [nearest,upward,downward,toward_zero,farthest]")
        print( "\t --ref= reference rounding mode for error estimator (in list [nearest,upward,downward,toward_zero,farthest, [random|average][|_det|_comdet]]) [default nearest]" )
        print( "\t -p --png= : png file to export plot")
        print( "\t -m --montecarlo : stochastic analysis of deterministic rounding mode")
        print( "\t --mca=rr-53-24 : add mca ins the study")
        print( "\t --specific-pattern= : pattern of rep (useful to plot histogramm without run.sh)")
        print( "\t --continue-on-extract-error")

    def checkScriptPath(self,fpath):
        if os.path.isfile(fpath) and os.access(fpath, os.X_OK):
            return os.path.abspath(fpath)
        else:
            print("Invalid Cmd:"+str(sys.argv))
            print(fpath + " should be executable")
            self.help()
            self.failure()
    def failure(self):
        sys.exit(42)

    def nbBin(self):
        return self._nbBin

    def runScript(self):
        return self._runScript

    def extractScript(self):
        return self._extractScript

    def extractTimeScript(self):
        return self._extractTimeScript

    def extractVarScript(self):
        return self._extractVarScript

    def continueOnExtractError(self):
        return self._continueOnExtractError

    def isHist(self):
        return self._hist

    def isTime(self):
        return self._time

    def repName(self):
        return self._rep

    def getSampleConfig(self):
        nbDet=1
        if self._nbSample==-1:
            nbDet=-1
        if self.isMontcarlo:
            nbDet=self._nbSample
        nbSamples={"random":self._nbSample,
                   "random_det":self._nbSample,
                   "random_comdet":self._nbSample,
                   "average":self._nbSample,
                   "average_det":self._nbSample,
                   "average_comdet":self._nbSample,
                   "nearest":nbDet,
                   "upward":nbDet,
                   "downward":nbDet,
                   "toward_zero":nbDet,
                   "farthest":nbDet,
                   "float":0 }
        for key in self.roundingTab:
            if key in self.listMCA:
                continue
            if not key in nbSamples.keys():
                print("invalid rounding mode :",key)
                self.help()
                self.failure()

        for key in nbSamples:
            if key not in self.roundingTab:
                nbSamples[key]=0


        for mcaMode in self.listMCA:
               nbSamples[mcaMode]=self._nbSample
        return nbSamples

    def num_threads(self):
        return self._num_threads

    def relative(self):
        return self._relative

    def run_only(self):
        return self._runOnly

    def no_plot(self):
        return self._noPlot

    def useSpecificPattern(self):
        return len(self._pattern)!=0

    def pattern(self):
        return self._pattern

    def ref(self):
        return self._ref

    def seed(self):
        return self._seed

if __name__=="__main__":
    conf=config_stat(sys.argv)
    nbSamples=conf.getSampleConfig()

    if conf.runScript()!=None:
        verrou_run_stat(conf.runScript(), conf.repName(), nbSamples, conf.ref(),conf.num_threads(), conf.seed())
    if conf.run_only():
        sys.exit(0)

    if conf.isHist():
        if not conf.useSpecificPattern():
            dataExtracted=verrou_extract_stat(conf.extractScript(), conf.repName(), nbSamples, conf.ref(), conf.continueOnExtractError())
            if not conf.no_plot():
                plot_hist(dataExtracted, png=conf.png, relative=conf.relative(), nb_bin=conf.nbBin())
            print_stat(dataExtracted, conf.ref())
        else:
            dataExtracted=verrou_extract_specific_pattern(conf.extractScript(), conf.repName(), conf.pattern(),ref=conf.ref(), continueOnExtractError=conf.continueOnExtractError())
            if not conf.no_plot():
                plot_hist(dataExtracted, png=conf.png, relative=conf.relative(), nb_bin=conf.nbBin())
            print_stat(dataExtracted, conf.ref())

    if conf.isTime():
        dataTimeExtracted=verrou_extract_time(conf.extractTimeScript(), conf.repName(), nbSamples)
        dataVarExtracted=verrou_extract_var(conf.extractVarScript(), conf.repName(), nbSamples)

        prepareDataForParaview(dataTimeExtracted, dataVarExtracted,conf.repName())
        runParaview(conf.repName())
