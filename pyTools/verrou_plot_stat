#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   B. Lathuili√®re <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import numpy
import matplotlib.pyplot as plt
import sys
import os
import copy
import subprocess
import math
from fractions import Fraction
import shutil
import datetime
import numpy as np
from pathlib import Path

import DD_stoch
import rounding_tool
import gen_config

maxNbPROC=None
roundingDetTabWithoutFloatPrefix=rounding_tool.roundingDetTabWithoutFloatPrefix
roundingDetTabWithFloatPrefix=rounding_tool.roundingDetTabWithFloatPrefix
roundingNonDetTabWithoutFloatPrefix=rounding_tool.roundingNonDetTabWithoutFloatPrefix


def verrou_run_stat(conf):
    rep=conf.repName()
    rep.mkdir(exist_ok=True)
    listOfConfigStat=conf.getSampleConfig()
    listOfStat=copy.deepcopy(listOfConfigStat)
    ref=conf.ref()
    if not ref in listOfConfigStat and rounding_tool.isValidRounding(ref):
        listOfStat[ref]=1

    taskTab=[]
    for roundingMode in listOfStat:
        nbSample=listOfStat[roundingMode]
        seedTab=None
        if conf.seed()!=None:
            import random
            random.seed(conf.seed())
            seedTab=random.sample(range(0,2**32-1), nbSample)
        if nbSample==0:
            continue
        name=("%s")%(roundingMode)
        envvars=rounding_tool.roundingToEnvVar(roundingMode)
        if roundingMode in roundingDetTabWithFloatPrefix:
            detName=rep/"det"
            detName.mkdir(exist_ok=True)

            name=("det/%s")%(roundingMode)

        repName=rep / name
        repName.mkdir(exist_ok=True)

        refDir=None
        script_cmp=None
        task=DD_stoch.stochTask(repName, refDir, conf.runScript(), script_cmp , copy.deepcopy(envvars) , seedTab=seedTab,  seedEnvVar= conf.get_envVarSeed())
        task.setNbRun(nbSample)
        taskTab+=[task]

    DD_stoch.runMultipleStochTask(taskTab,  maxNbPROC)

def extractLoopOverComputation(rep, listOfStat, extractFunc):
    resDict={}

    for roundingMode in listOfStat:
        name=("%s")%(roundingMode)
        if roundingMode in roundingDetTabWithFloatPrefix:
            name=("det/%s")%(roundingMode)

        resTab=[]
        nbSample=listOfStat[roundingMode]

        if nbSample==0:
            resDict[roundingMode]=None
            continue
        if nbSample==-1:
            i=0
            while True:
                nameSample=rep / name / ("dd.run%i"%(i))
                if nameSample.is_file():
                    value=extractFunc(nameSample)
                    resTab+=[value]
                    i+=1
                else:
                    break

        for i in range(nbSample):
            nameSample=rep / name / ("dd.run%i"%(i))
            value=extractFunc(nameSample)
            resTab+=[value]

        resDict[roundingMode]=resTab

    return resDict



def verrou_extract_stat(extract_run, rep, listOfConfigStat, ref, continueOnExtractError):

    listOfStat=copy.deepcopy(listOfConfigStat)
    if ref not in listOfConfigStat and rounding_tool.isValidRounding(ref):
        listOfStat[ref]=1

    def getValueData(repName):
        try:
            resProcess=subprocess.getoutput(str(extract_run) +" "+ str(repName)+ " 2> "+str(repName / "extract.err") )
            return float(resProcess)
        except ValueError as err:
            print("Value Error while extracting value from :"+ str(extract_run) +" "+ str(repName))
            if continueOnExtractError:
                return "fail"
            else:
                print("debug:", resProcess)
                sys.exit(42)

    res=extractLoopOverComputation(rep,listOfStat, getValueData)
    if rounding_tool.isValidRounding(ref):
        res["ref"]=res[ref]
    else:
        res["ref"]=[float(ref)]
    if "fail" in res["ref"]:
        print("Even with --continue-on-extract-error the reference should not contain error")
        sys.exit()

    if ref not in listOfConfigStat and ref in res:
        res.pop(ref)
    return res

def verrou_extract_specific_pattern(extract_run, rep, listOfPattern, listOfName=None, continueOnExtractError=False):
    def getValueData(repName):
        try:
            return float(subprocess.getoutput(extract_run +" "+ repName))
        except ValueError as err:
            print("Value Error while extracting value from :"+ extract_run +" "+ repName)
            if continueOnExtractError:
                return "fail"
            else:
                sys.exit(42)

    if listOfName==None:
        listOfSplitName=[pattern.split("/") for pattern in listOfPattern ]
        #cleaning begin
        for i in range(len(listOfSplitName[0])):
            listOfName_i=[x[0] for x in listOfSplitName]
            if len(set(listOfName_i))==1:
                   listOfSplitName=[x[1:] for x in listOfSplitName]
            else:
                break
        #cleaning end
        for i in range(len(listOfSplitName[0])):
            listOfName_i=[x[-1] for x in listOfSplitName]
            if len(set(listOfName_i))==1:
                   listOfSplitName=[x[0:-1] for x in listOfSplitName]
            else:
                break
        #name generation
        listOfName=["/".join(x) for x in listOfSplitName]
        for i in range(len(listOfName)):
            if listOfName[i]=="":
                listOfName[i]="pattern"+str(i)
    res={}
    for i  in range(len(listOfPattern)):
        pattern=listOfPattern[i]
        listOfCatchPattern=[n for n in rep.glob(pattern) if n.is_dir()]

        if len(listOfCatchPattern)==0:
            print("empty pattern :%s/%s"%(rep,pattern))
            sys.exit(42)
        listOfValue=[getValueData(repName) for repName in listOfCatchPattern]

        res[listOfName[i]]=listOfValue
    return res


def verrou_extract_paraview_time(extract_time, rep, listOfStat):
    def getTimeData(repName):
        return [float(x) for x in (subprocess.getoutput(str(extract_time) +" "+ str(repName))).split("\n")]
    return extractLoopOverComputation(rep,listOfStat, getTimeData)

def getExtractTimeData(extract_time,repName):
    res=[x for x in (subprocess.getoutput(str(extract_time) +" "+ str(repName))).split("\n")]
    name=None
    if res[0].startswith("#"):
        name=(res[0].replace("#","")).strip()
        res=res[1:]
    if len(res[0].split(" "))==1:
        res=[(i,float(res[i])) for i in range(len(res))]
        if name==None:
            name=("index","value")
        else:
            name=("index",name)
        return (name,res)
    if len(res[0].split(" "))==2:
        for i in range(len(res)):
            tupleXY=res[i].split(" ")
            res[i]=(float(tupleXY[0]), float(tupleXY[1]))
        if name==None:
            name="index\tvalue"
        return (name.split("\t"),res)
    print("debug getExtractTimeData: ",res)

def verrou_extract_time(extract_time, rep, listOfStat):
    def getTimeData(repName):
        return getExtractTimeData(extract_time,repName)
    return extractLoopOverComputation(rep,listOfStat, getTimeData)


class verrou_extract_time_data:
    def __init__(self,resultOfVerrouExtractTime, conf):
        self._conf=conf
        self._dataParsed=resultOfVerrouExtractTime
        self.initRounding()
        self.parseRef()
        self.parseAllRounding()
        self.parseErrorRef()

    def initRounding(self):
        self._listOfScalar=[]
        self._listOfTab=[]
        for roundingMode in sorted([x for x in self._dataParsed.keys()]):
            if self._dataParsed[roundingMode]==None:
                continue
            if len(self._dataParsed[roundingMode])==1:
                self._listOfScalar+=[roundingMode]
            if len(self._dataParsed[roundingMode])>1:
                self._listOfTab+=[roundingMode]
        self._refRounding=self._conf.ref()
        if self._refRounding not in self._listOfScalar:
            print("Stochastic reference (not yet implemented) and  value reference are not accepted with time plot")
            sys.exit(42)

    def parseRef(self):
        if self._refRounding in self._listOfScalar:
            brutData=self._dataParsed[self._refRounding]
            sampleIndex=0
            nameIndex=0
            tabIndex=1
            self._labelX=brutData[sampleIndex][nameIndex][0]
            self._labelY=brutData[sampleIndex][nameIndex][1]
            self._refX=[x[0] for x in brutData[sampleIndex][tabIndex]]
            self._refY=[x[1] for x in brutData[sampleIndex][tabIndex]]

        if self._refRounding in self._listOfTab:
            print("Not yet implemented")

    def parseAllRounding(self):
        self._data={}
        for rounding in self._listOfScalar + self._listOfTab:
            tabIndex=1
            nbSample=len(self._dataParsed[rounding])
            valueXSampleTab=[]
            valueYSampleTab=[]
            valueYInterpSampleTab=[]
            for sampleIndex in range(nbSample):
                valueX=[x[0] for x in self._dataParsed[rounding][sampleIndex][tabIndex]]
                valueY=[x[1] for x in self._dataParsed[rounding][sampleIndex][tabIndex]]

                valueXSampleTab+=[valueX]
                valueYSampleTab+=[valueY]
                valueYInterpSampleTab+=[np.interp(self._refX, valueX, valueY)]

            nbTimeIndex=len(self._refX)
            def computeError(ref, valueTab):
                return max([abs(value-ref) for value in valueTab])/abs(ref)

            errorTab=[ computeError(self._refY[time],
                                    [ valueYInterpSampleTab[sample][time] for sample in range(nbSample)])
                       for time in range(nbTimeIndex)]

            self._data[rounding]={
                "XSampleTab":valueXSampleTab, "YSampleTab":valueYSampleTab,
                "YInterpSampleTab":valueYInterpSampleTab,
                "ErrorEstimation": errorTab
            }

    def parseErrorRef(self):
        self._refError=None
        self._labelRef="mathematical reference"
        nbTimeIndex=len(self._refX)
        if self._conf.lambdaTimeRef()!=None:
            lambdaRef=self._conf.lambdaTimeRef()
            self._refError=[abs((self._refY[i]- lambdaRef(self._refX[i]))/lambdaRef(self._refX[i])) for i in range(nbTimeIndex)]
        if self._conf.scriptTimeRef()!=None:
            (nameRef,tabRef)=getExtractTimeData(self._conf.scriptTimeRef(), self._conf.repName() / "det" / self._refRounding /"dd.run0")
            if nameRef!=None:
                self._labelRef=nameRef[1]
            mathRefX=[x[0] for x in tabRef]
            mathRefY=[x[1] for x in tabRef]
            self._refError=[abs(mathRefY[iTime] - self._refY[iTime])/ abs(mathRefY[iTime]) for iTime in range(len(mathRefX))]

    def getLabelX(self): return self._labelX
    def getLabelY(self): return self._labelY
    def getRefX(self): return self._refX
    def getRefY(self): return self._refY
    def getListOfRoundingScalar(self): return self._listOfScalar
    def getListOfRoundingTab(self): return self._listOfTab
    def getXSampleTab(self,rounding): return self._data[rounding]["XSampleTab"]
    def getYSampleTab(self,rounding): return self._data[rounding]["YSampleTab"]
    def getYInterpSampleTab(self,rounding):
        return self._data[rounding]["YInterpSampleTab"]
    def getErrorEstimation(self, rounding):
        return self._data[rounding]["ErrorEstimation"]
    def getRefError(self): return self._refError
    def getLabelRefError(self): return self._labelRef

def verrou_extract_paraview_var(extract_var, rep, listOfStat):
    def getVarData(repName):
        lines=(subprocess.getoutput(extract_var +" "+ repName)).split("\n")
        keys=lines[0].split()
        counter=0
        res={}
        for line in lines[1:]:
            values=[ float(x) for x in line.split()]
            if len(values)!=len(keys):
                print("invalid result : %(%s)"%(extract_var,repName))
                sys.exit()
            for i in range(len(keys)):
                res[(keys[i],counter)]= values[i]
            counter+=1

        return res
    return extractLoopOverComputation(rep,listOfStat, getVarData)




def prepareDataForParaview(dataTime,dataVar, rep):

    csvTime=open(rep / "paraviewTime.csv","w")
    first=True
    for rounding in dataTime:
        tabResult=dataTime[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                if first:
                    csvTime.write("index"+"\t" + "\t".join(["t"+str(t) for t in range(len(tabResult[i]))] ) +"\n")
                    first=False

                csvTime.write(rounding+"-"+str(i) +"\t"+ "\t".join([ str(x) for x in tabResult[i]])+"\n"  )
    csvTime.close()


    #select key
    first =True
    keys=None
    for rounding in dataVar:
        tabResult=dataVar[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                keysLocal=tabResult[i].keys()
                if first:
                    keys=list(keysLocal)
                    first=False
                else:
                    if keys!=list(keysLocal):
                        print("incoherent key")
                        sys.exit()
    keys.sort(key=lambda x:x[0])
    keys.sort(key=lambda x:x[1])

    csvParam=open(rep / "paraviewParam.csv","w")
    first=True
    for rounding in dataVar:
        tabResult=dataVar[rounding]
        if tabResult!=None:
            for i in range(len(tabResult)):
                if first:
                    csvParam.write("index"+"\t" + "\t".join([key+"-"+str(t) for (key,t) in keys ]) +"\n")
                    first=False
                csvParam.write(rounding+"-"+str(i) +"\t"+ "\t".join([ str(tabResult[i][x]) for x in keys])+"\n"  )
    csvParam.close()

def runParaview(rep):
    def getScriptPath():
        #the script is at the same place as this script
        return __file__.replace(Path(sys.argv[0]).name,"paraview_script.py")

    cmd="paraview --script=%s"%(getScriptPath())
    print("paraview cmd: ", cmd)
    env = copy.deepcopy(os.environ)
    env["VERROU_PARAVIEW_DATA_PATH"]=rep
    process=subprocess.Popen(cmd, env=env, shell=True)

    def paraviewHelp():
        print(""" To enable link selection:
\t1) In Tools/ManageLink... click on Add
\t2) Select Selection Link (last item)
\t3) On left select Objects/TransposeTable1
\t4) On right select Objects/CSVReader2""")
    paraviewHelp()
    process.wait()


def listOfHistogram(listOfBrutData, nb_bin):
    maxValue=max([max([a for a in data if a!=float("inf") if a!="fail"]) for data in listOfBrutData])
    minValue=min([min([a for a in data if a!=float("-inf")if a!="fail"]) for data in listOfBrutData])

    numOfSpecialFloat=[ {"-inf":data.count(float("-inf")), "inf":data.count(float("inf")),"NaN":data.count(float("NaN")),"fail":data.count("fail") } for data in listOfBrutData]
    listOfFilteredBrutData=[[x for x in data if x!=(float("inf")) and x!=(float("-inf")) and x!=float("NaN") and x!="fail"] for data in listOfBrutData  ]

    bins=  (numpy.histogram(listOfFilteredBrutData[0], bins=nb_bin, range=[minValue, maxValue]))[1]
    return bins,listOfFilteredBrutData,numOfSpecialFloat

def plot_hist(data, png=False, relative=False, nb_bin=40):
    if relative!=False:
        plt.rcParams['text.usetex'] = True

    fig, ax = plt.subplots()

    plotWidth=1 #plot variable

    #selection of plot
    listOfScalar=[] # rounding mode plotted with vertical ligne
    listOfTab=[]    # rounding mode plotted with histogram
    for roundingMode in sorted([x for x in data.keys() if x!="ref"]):
        if data[roundingMode]==None:
            continue
        if len(data[roundingMode])==1:
            listOfScalar+=[roundingMode]
        if len(data[roundingMode])>1:
            listOfTab+=[roundingMode]

    convert= lambda x :x
    legend= "X"
    if relative!=False:
        if relative in roundingDetTabWithFloatPrefix:
            valueRef=data[relative][0]
            latexName=relative.replace("_",r"\_")
            legend=r"$\frac{X-X_{%s}}{|X_{%s}|}$"%(latexName,latexName)
        else:
            valueRef=float(relative)
            legend=r"$\frac{X-%s}{|%s|}$"%(relative,relative)
        convert=lambda x:  (x-valueRef) /abs(valueRef)



    #extraction of same dataset size and histogram generation
    size=min([len(data[key]) for key in listOfTab  ])
#    hists=listOfHistogram([[convert(x) for x in data[key][0:size]] for key in listOfTab ])
    bins,datas, numOfSpecialFloat=listOfHistogram([[convert(x) for x in data[key][0:size] ] for key in listOfTab  ], nb_bin)

    lineColor=["orange","sienna","blue","red","green", "black", "purple","yellow"]
    lineColor+=["orange","blue","red","green", "black", "purple","yellow"]

    lineIndex=0

    #plot histogram
    maxHist=0
    name=[]
    name+=listOfTab
    plthandle=[]
    for i in range(len(name)):
        special=numOfSpecialFloat[i]["-inf"] + numOfSpecialFloat[i]["inf"]+numOfSpecialFloat[i]["NaN"]
        fail=numOfSpecialFloat[i]["fail"]
        namei=name[i]
        if special!=0 and fail!=0:
            namei+=" (#Nan/Inf:%i #fail:%i)"%(special, fail)
        if special==0 and fail!=0:
            namei+=" (#fail:%i)"%(fail)
        if special!=0 and fail==0:
            namei+=" (#Nan/Inf:%i)"%(special)

        if plt.rcParams['text.usetex']:
            namei=namei.replace("_",r"\_")
        handle=plt.hist(datas[i],bins=bins, label=namei, linewidth=plotWidth,  alpha=0.6,color=lineColor[lineIndex])#, linestyle="-")
        lineIndex+=1
        plthandle+=[handle[0]]

    #plot vertical line
    nameDet=listOfScalar
    for mode in nameDet:
        value=convert(data[mode][0])
        #handle=plt.plot([value, value], [0, maxHist] , label=mode, linestyle='--', linewidth=plotWidth, color=lineColor[lineIndex])
        handle=plt.axvline(x=value,linestyle='--', linewidth=plotWidth, color=lineColor[lineIndex])

        modeStr=mode
        if plt.rcParams['text.usetex']:
            modeStr=mode.replace("_",r"\_")
        plt.text(value, 1., modeStr ,{'ha': 'left', 'va': 'bottom'},color=lineColor[lineIndex], transform=ax.get_xaxis_transform(),rotation=80)

        lineIndex+=1
        #plthandle+=[handle[0]]

#    plt.legend(plthandle, name+nameDet)

    plt.legend()
    plt.grid()
    plt.ylabel("#occurrence")
    if plt.rcParams['text.usetex']:
        plt.ylabel("$\#occurrence$")

    plt.xlabel(legend)

    if png!=False:
        plt.savefig(png,dpi=300,bbox_inches='tight')
    else:
        plt.show()

def plot_time(dataBrut, conf):
    data=verrou_extract_time_data(dataBrut, conf)

    fig, ax = plt.subplots()
    lineColor=["orange","sienna","blue","red","green", "black", "purple","yellow"]
    lineColor+=["orange","blue","red","green", "black", "purple","yellow"]
    if conf.logScalX():
        ax.set_xscale("log",base=10)
    labelX=data.getLabelX()
    labelY=data.getLabelY()

    nbTimeIndex=len(data.getRefX())

    listOfScalar=data.getListOfRoundingScalar()
    index=len(listOfScalar)
    for roundingMode in data.getListOfRoundingTab():
        ax.plot(data.getRefX(), data.getErrorEstimation(roundingMode),
                "o", color=lineColor[index], label=roundingMode)
        index+=1

    if conf.timeRef()!=None:
        ax.plot(data.getRefX(), data.getRefError(),
                "+", color=lineColor[index], label=data.getLabelRefError())

    ax.set_yscale("log",base=10)
    ax.set_ylabel("verrou error estimation")
    ax.set_xlabel(labelX)
    ax.legend()

    if conf.timeVal():
        ax2=ax.twinx()
        index=len(listOfScalar)
        for roundingMode in data.getListOfRoundingTab():
            XSampleTab=data.getXSampleTab(roundingMode)
            YSampleTab=data.getYSampleTab(roundingMode)
            ax2.plot(XSampleTab[0], YSampleTab[0],
                     linewidth=1, color=lineColor[index],label=roundingMode)
            for sample in range(1, len(XSampleTab)):
                ax2.plot(XSampleTab[sample], YSampleTab[sample],
                         linewidth=1, color=lineColor[index])
            index+=1

        index=0
        for roundingMode in listOfScalar:
            XSampleTab=data.getXSampleTab(roundingMode)
            YSampleTab=data.getYSampleTab(roundingMode)
            ax2.plot(XSampleTab[0], YSampleTab[0],
                     linewidth=3, color=lineColor[index], label=roundingMode)
            index+=1
        ax2.set_ylabel(labelY)

    plt.grid()

    plt.xlabel(labelX)
    fig.tight_layout()

    if conf.png()!=False:
        plt.savefig(conf.png(),dpi=300,bbox_inches='tight')
    else:
        plt.show()

def maxDiff(tab,ref):
    res=max([abs(x-ref) for x in tab ])
    return res


def computeRelative(estim, refValue):
    if abs(refValue)>=1.e-308:
        estimRel= estim / abs(refValue)
        if estimRel>0:
            estimRelBit= -math.log2(estimRel)
        else:
            estimRelBit=float("Inf")
        return (estimRel, estimRelBit)
    else:
        return (float("NaN"), float("NaN"))

def estimMca(tab):
    tabFrac=[Fraction(x) for x in tab]
    mean=sum(tabFrac) / Fraction(len(tabFrac))
    sigma=math.sqrt( Fraction(1)/ Fraction(len(tabFrac)-1) * sum( (x -mean)**2 for x in tabFrac ) )
    ratio=sigma/mean
    bit=None
    try:
        bit=-math.log2(ratio)
    except:
        print("tab:", tab, file=sys.stderr)
        print("mean:", float(mean), file=sys.stderr)
        bit=float("Inf")
    return (ratio, bit)

def print_stat(data, conf):
    ref=conf.ref()
    mca_estimator=conf.mca_estimator()

    pathName=conf.repName()/"stat.last"
    if pathName.is_file():
        timeValue=datetime.datetime.fromtimestamp(pathName.stat().st_mtime)
        timeStr=(timeValue.strftime("%m-%d-%Y_%Hh%Mm%Ss"))
        os.rename(pathName,pathName.replace(".last","."+timeStr))

    handler=open(pathName ,"w")
    handler.write("md5 cmd.last: "+ conf.md5Param()+"\n" )
    def localPrint(strValue):
        print(strValue)
        if handler!=None:
            handler.write(strValue+"\n")

    listOfScalar=[] # rounding mode plotted with vertical ligne
    listOfTab=[]

    for roundingMode in sorted([x for x in data.keys()]):
        if data[roundingMode]==None:
            continue
        if len(data[roundingMode])==1:
            listOfScalar+=[roundingMode]
        if len(data[roundingMode])>1:
            listOfTab+=[roundingMode]

    refValue=None
    if len(data["ref"])==1:
        refValue=data["ref"][0]
    else:
        refValue=numpy.mean(data["ref"])

    localPrint("\nrefValue[%s] : %.17e"%(ref,refValue))
    print("estimator\tabs\trel\trel(in bit)")
    if mca_estimator:
        localPrint("[mca] estimator\trel\trel(in bit)")

    maxEstim=0
    nbTotalError=0
    nbTotalSample=0
    tabValue=[]
    for rounding in listOfTab:
        if not "fail" in data[rounding]:
            nbTotalSample+=len(data[rounding])
            estim=    maxDiff(data[rounding],refValue)
            maxEstim=max(estim,maxEstim)
            estimRel, estimRelBit=computeRelative(estim, refValue)
            localPrint("%s:\t%e\t%.4e\t%.2fbit"%(rounding, estim,estimRel, estimRelBit))
            if mca_estimator:
                estimRel, estimRelBit=estimMca(data[rounding])
                localPrint("[mca] %s:\t%.4e\t%.2fbit"%(rounding, estimRel, estimRelBit))
                tabValue+=data[rounding]

        else:
            nbError=data[rounding].count("fail")
            nbTotalError+=nbError
            nbTotalSample+=len(data[rounding])
            if nbError==len(data):
                localPrint("%s (100\% fail) :"%(rounding))
            else:
                estim=    maxDiff([x for x in data[rounding] if x!="fail"],refValue)
                maxEstim=max(estim,maxEstim)
                estimRel, estimRelBit=computeRelative(estim, refValue)
                localPrint("%s (%.1f%% fail) :\t%e\t%.4e\t%.2fbit"%(rounding, 100.*nbError/float(len(data)) ,estim,estimRel, estimRelBit))
                if mca_estimator:
                    estimRel, estimRelBit=estimMca([x for x in data[rounding] if x!="fail"])
                    tabValue+=[x for x in data[rounding] if x!="fail"]
                    localPrint("[mca] %s (%.1f%% fail) :\t%.4e\t%.2fbit"%(rounding, 100.*nbError/float(len(data)) ,estimRel, estimRelBit))

    for rounding in listOfScalar:

        nbError=data[rounding].count("fail")
        nbTotalError+=nbError
        nbTotalSample+=len(data[rounding])
        if nbError==0:
            if mca_estimator:
                tabValue+=data[rounding]

            estim=    maxDiff(data[rounding],refValue)
            maxEstim=max(estim,maxEstim)
        else:
            localPrint("Warning %s failing")

    estimRel, estimRelBit=computeRelative(maxEstim, refValue)
    if nbTotalError==0:
        localPrint("%s:\t%e\t%.4e\t%.2fbit"%("all", maxEstim,estimRel, estimRelBit))
    else:
        localPrint("%s (%.1f%% fail) :\t%e\t%.4e\t%.2fbit"%("all", 100.*nbTotalError/float(nbTotalSample),maxEstim,estimRel, estimRelBit))

    if mca_estimator:
        estimRel, estimRelBit=estimMca(tabValue)
        if nbTotalError==0:
            localPrint("[mca] %s:\t%.4e\t%.2fbit"%("all", estimRel, estimRelBit))
        else:
            localPrint("[mca] %s (%.1f%% fail) :\t%.4e\t%.2fbit"%("all", 100.*nbTotalError/float(nbTotalSample),estimRel, estimRelBit))



class config_stat(gen_config.gen_config):

    def __init__(self, argv, environ,config_keys=["PLOT_STAT"]):
        self._hist=True
        self.defaultRoundingTab=["det","random","average"]
        super().__init__(argv,environ, config_keys,[1,2,3])
        if sys.argv[1]=="bash_completion":
            self.write_bashCompletion_script()
            sys.exit(0)
        self.normalize()
        self.check()
        self.cachePrepare()
        self.instr_prefix="VERROU"
        self.saveParam(self._rep /"cmd.last")

    def registerOptions(self):
        self.addRegistry("_roundingList", "string", "ROUNDING_LIST", ["--rounding=","#--rounding-list=","#--rounding-mode="] , [], additive=True,
                         docStr="rounding mode list (coma separated) [default random,average,det]",
                         suggestionForComaList= rounding_tool.roundingDetTabWithFloatPrefix +rounding_tool.roundingNonDetTabWithFloatPrefix + ["mca-rr-53-24", "mca-pb-53-24", "mca-mca-53-24"])
        self.addRegistry("_rep",      "string", "REP",       ["--rep="], "verrou.stat", docStr="working directory (default verrou.stat)")
        self.addRegistry("_cache", "string",  "CACHE",       ["--cache="], "continue" , checkParam=["continue", "rename", "clean"], docStr="cache policy: continue (default), rename, clean")
        self.addRegistry("_nbSample", "int",    "NRUNS",     ["-s:", "--samples=","--nruns="], 100, docStr="number of samples [default 100] -1 means use what available without use run.sh")
        self.addRegistry("_num_threads", "int",    "NUM_THREADS",   ["--num-threads="],  None, docStr="number of parallel run")

        self.addRegistry("_isMontecarlo", "bool","MONTECARLO",["--montecarlo","-m"], False, docStr="use stochastic analysis for deterministic rounding mode")
        self.addRegistry("_runOnly",  "bool",   "RUN_ONLY", ["--run-only"], False, docStr="only execute run (neither plot histogramm nor print stat)")
        self.addRegistry("_noPlot",   "bool",   "NO_PLOT",  ["--no-plot"],  False, docStr="do not plot hist (ie. print stat only)")

        self.addRegistry("_nbBin",    "int",    "NBIN",     ["--nb-bin="],            40,  docStr="number of bins for histogram [default 40] ")
        self.addRegistry("_seed",     "int",    "SEED",     ["--seed="],             None)
        self.addRegistry("_png",      "string", "PNG",      ["--png=","-p:"],        False, docStr="png file to export plot")
        self.addRegistry("_ref",      "string", "REF",      ["--ref="],              "nearest", docStr="reference for error estimator : rounding mode or value [default nearest]")
        self.addRegistry("_relative", "string", "RELATIVE", ["--relative="],         False, docStr="if used configure plot with relative abscissa (same parameter as --ref)")
        self.addRegistry("_time",     "bool",   "TIME",     ["--time","-t"],         False)
        self.addRegistry("_logScalX", "bool",   "LOGSCALX", ["--log-scalx"],         False)
        self.addRegistry("_timeVal",  "bool",   "TIMEVAL",  ["--time-val"],          False)
        self.addRegistry("_timeRef",  "string", "TIMEREF",  ["--time-ref="],         None)

        self.addRegistry("_timeParaview",     "bool",   "TIME_PARAVIEW",     ["--paraview_time"],         False)
        self.addRegistry("_pattern",  "string", "PATTERN",  ["--specific-pattern="], [], additive=True, docStr="pattern of rep (useful to plot histogramm without run.sh)")
        self.addRegistry("_continueOnExtractError", "bool", "CONTINUE_ON_EXTRACT_ERROR", ["--continue-on-extract-error"], False)
        self.addRegistry("_mca_estimator", "bool", "MCA_ESTIMATOR",      ["--mca-estimator"],   False, docStr="mca estimator in addition to bernouilli estimator")

    def normalize(self):
        if len(self._pattern)!=0:
            self._rep="."
        self._rep=Path(self._rep)
        if self._time or self._timeParaview:
            self._hist=False

        self._roundingTab=[]
        for arg in self._roundingList:
            splitArgs=arg.split(",")
            for toCheck in splitArgs:
                if toCheck not in ["det"]:
                    check=rounding_tool.roundingToEnvVar(toCheck)
                self._roundingTab+=[toCheck]

        if self._roundingTab==[]:
            self._roundingTab=self.defaultRoundingTab

        if "det" in self._roundingTab:
            self._roundingTab.remove("det")
            self._roundingTab=[x for x in roundingDetTabWithoutFloatPrefix if x not in ["float","ftz","daz","dazftz"]]+self._roundingTab

        self._roundingTab=list(dict.fromkeys(self._roundingTab)) #uniq

        if self.run_only():
            if len(self.exec_arg)==1:
                self._runScript=self.exec_arg[0]
            if len(self.exec_arg)>1:
                self.help()
                print(self.exec_arg, "size should be one")
                self.failure()
            return

        if self._hist and len(self._pattern)==0:
            if len(self.exec_arg)>2:
                self.help()
                self.failure()
            if len(self.exec_arg)==2:
                self._runScript=self.exec_arg[0]
                self._extractScript=self.exec_arg[1]
            if len(self.exec_arg)==1:
                self._runScript=None
                self._extractScript=self.exec_arg[0]

        if len(self._pattern)!=0:
            if len(self.exec_arg)>1:
                self.help()
                print(self.exec_arg, "size should be at least 2")
                self.failure()
            self._extractScript=self.exec_arg[0]
            self._runScript=None
        if self._timeParaview:
            if len(self.exec_arg)>3:
                self.help()
                print(self.exec_arg, "size should be at least 3")
                self.failure()
            self._runScript=self.exec_arg[0]
            self._extractTimeScript=self.exec_arg[1]
            self._extractVarScript=self.exec_arg[2]

        if self._time:
            if len(self.exec_arg)>2:
                self.help()
                print(self.exec_arg, "size should be at least 2")
                self.failure()
            self._runScript=self.exec_arg[0]
            self._extractTimeScript=self.exec_arg[1]
            if self._timeRef!=None:
                time_ref_script=self.checkScriptPath(self._timeRef,False)
                if time_ref_script!=None:
                    self._time_ref_script=time_ref_script
                    self._lambdaTimeRef=None
                else:
                    lambdaTimeRef=eval("lambda x: "+self._timeRef)
                    try:
                        test_to_get_early_error=float(lambdaTimeRef(1)) #unused
                        self._lambdaTimeRef=lambdaTimeRef
                        self._time_ref_script=None
                    except:
                        print(self._timeRef+ "should be a valid executable or x lambda expression")
                        self.failure()

    def check(self):
        if len(self._pattern)!=0 and (self._isMontecarlo==True or self._nbSample!=None or self._time==True):
            print("--specific-pattern is incompatible with montecarlo, samples and time options")
            self.failure()
        if self._relative!=False:
            if not rounding_tool.isValidRef(self._relative):
                print(self._relative +" is not a valid for the option relative")
                self.failure()
        if not self.useSpecificPattern():
            if not rounding_tool.isValidRef(self._ref):
                print(self._ref +" is not a valid for the option reference")
                self.failure()
        else:
            if not isStrFloat(self._ref):
                print("With --specific-pattern option --ref shold be a float")
                self.failure()

    def cachePrepare(self):
        rep=self.repName()
        if self.getCache()=="continue":
            rep.mkdir(exist_ok=True)

        if self.getCache()=="clean":
            if rep.is_dir():
                shutil.rmtree(rep, ignore_errors=True)
            rep.mkdir()
        if self.getCache()=="rename":
            if rep.is_dir():
                timeStr=datetime.datetime.fromtimestamp(max([ (x.stat()).st_mtime for x in list(rep.iterdir())+[rep] ])).strftime("%m-%d-%Y_%Hh%Mm%Ss")
                self.oldRepName=rep.with_name(rep.name+ "-"+timeStr)
                rep.rename(self.oldRepName)
            rep.mkdir()
        else:
            self.oldRepName=None

    def usageCmd(self):
        name=sys.argv[0]
        print( "%s [options] run.sh extract.sh or %s -t[or --time] [options] run.sh extractTime.sh extractVar.sh "%(name,name)  )
        print(self.get_EnvDoc(self.config_keys[-1]))
        print("Valid rounding modes are:")
        print("\t",  ",".join(rounding_tool.roundingDetTabWithoutFloatPrefix ))
        print("\t",  ",".join(rounding_tool.roundingNonDetTabWithoutFloatPrefix ))
        print("\t",  ",".join(["mca-rr-53-24", "mca-pb-53-24", "mca-mca-53-24"]) , "(53 and 24 can be modified)")
        print("\t rounding mode can be prefixed by \"float_\"")
        print("\t det is an alias to "+",".join(rounding_tool.roundingDetTabWithoutFloatPrefix))

    def help(self):
        self.usageCmd()

    def repName(self): return self._rep
    def ref(self): return self._ref
    def png(self): return self._png
    def seed(self): return self._seed

    def num_threads(self): return self._num_threads

    def run_only(self): return self._runOnly
    def no_plot(self): return self._noPlot
    def getCache(self):return self._cache

    def runScript(self): return self._runScript
    def extractScript(self): return self._extractScript
    def extractTimeScript(self): return self._extractTimeScript
    def extractVarScript(self): return self._extractVarScript
    def continueOnExtractError(self): return self._continueOnExtractError

    def isHist(self): return self._hist
    def nbBin(self): return self._nbBin
    def relative(self): return self._relative
    def mca_estimator(self): return self._mca_estimator
    def useSpecificPattern(self): return len(self._pattern)!=0
    def pattern(self): return self._pattern

    def isParaviewTime(self): return self._timeParaview

    def isTime(self): return self._time
    def timeVal(self): return self._timeVal
    def timeRef(self): return self._timeRef
    def logScalX(self): return self._logScalX

    def lambdaTimeRef(self):
        if self._timeRef!=None:
            return self._lambdaTimeRef
        else:
            return None
    def scriptTimeRef(self):
        if self._timeRef:
            return self._time_ref_script
        else:
            return None

    def getSampleConfig(self):
        nbDet=1
        if self._isMontecarlo:
            nbDet=self._nbSample
        nbSamples={}
        for key in self._roundingTab:
            if key in roundingDetTabWithFloatPrefix:
                nbSamples[key]=nbDet
            else:
                nbSamples[key]=self._nbSample
        return nbSamples



if __name__=="__main__":
    conf=config_stat(sys.argv,os.environ)
    nbSamples=conf.getSampleConfig()

    if conf.runScript()!=None:
        verrou_run_stat(conf)
    if conf.run_only():
        sys.exit(0)

    if conf.isHist():
        if not conf.useSpecificPattern():
            dataExtracted=verrou_extract_stat(conf.extractScript(), conf.repName(), nbSamples, conf.ref(), conf.continueOnExtractError())
            if not conf.no_plot():
                plot_hist(dataExtracted, png=conf.png(), relative=conf.relative(), nb_bin=conf.nbBin())
            print_stat(dataExtracted, conf)
        else:
            dataExtracted=verrou_extract_specific_pattern(conf.extractScript(), conf.repName(), conf.pattern(),ref=conf.ref(), continueOnExtractError=conf.continueOnExtractError())
            if not conf.no_plot():
                plot_hist(dataExtracted, png=conf.png(), relative=conf.relative(), nb_bin=conf.nbBin())
            print_stat(dataExtracted, conf)

    if conf.isParaviewTime():
        dataParaviewTimeExtracted=verrou_extract_paraview_time(conf.extractTimeScript(), conf.repName(), nbSamples)
        dataParaviewVarExtracted=verrou_extract_paraview_var(conf.extractVarScript(), conf.repName(), nbSamples)

        prepareDataForParaview(dataParaviewTimeExtracted, dataParaviewVarExtracted,conf.repName())
        runParaview(conf.repName())

    if conf.isTime():
        dataTimeExtracted=verrou_extract_time(conf.extractTimeScript(), conf.repName(), nbSamples)
        plot_time(dataTimeExtracted,conf)

