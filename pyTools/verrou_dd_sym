#!/usr/bin/env python3
# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   F. Févotte <francois.fevotte@edf.fr>
#   B. Lathuilière <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.


import sys
import os
import subprocess
from valgrind import dd_config
from valgrind import DD_stoch
from valgrind import DD_exec_stat


class DDsym(DD_stoch.DDStoch):
    def __init__(self, config):
        DD_stoch.DDStoch.__init__(self, config)

    def referenceRunEnv(self):
        return {"VERROU_ROUNDING_MODE": self.config_.referenceRounding,
                         "VERROU_MCA_MODE": "ieee",
                         "VERROU_GEN_EXCLUDE":   os.path.join(self.ref_,"dd.sym.%p")}

    def isFileValidToMerge(self, name):
        return name.startswith("dd.sym.")

    def getDeltaFileName(self):
        return "dd.sym"

    def sampleRunEnv(self,dirName):
        return {"VERROU_EXCLUDE": os.path.join(dirName, self.getDeltaFileName() +".exclude"),
                "VERROU_LIBM_NOINST_ROUNDING_MODE":self.config_.referenceRounding,
        }

    def coerce(self, delta_config):
        def transform(line):
            spline=line.split("\t")
            return self.demangle(spline[0]) + "\t" + spline[1]
        return "\n  " + "\n  ".join([transform(line) for line in delta_config])

    def demangle(self, mangledName):
        try:
            line=subprocess.check_output(["c++filt",mangledName]).decode("utf8").strip()
        except:
            line=mangledName
        return line


class ddSymConfig(dd_config.ddConfig):

    def __init__(self, argv, environ,config_keys):
        super().__init__(argv,environ,config_keys,prefix="dd.sym")

    def registerOptions(self):
        super().registerOptions()
        self.addRegistry("referenceRounding", "string", "DD_REFERENCE_ROUNDING",["--reference-rounding="],"native",["native","nearest"] )


if __name__ == "__main__":
    config=ddSymConfig(sys.argv,os.environ, ["INTERFLOP","VERROU"])
    et=DD_exec_stat.exec_stat(config.get_cacheRep())
    dd = DDsym(config)
    dd.run()
    et.terminate()
