#!/usr/bin/env python3
import os
import sys
import re
import fnmatch
import glob
import functools
import copy
import DD_stoch
import post_config
import rounding_tool
from pathlib import Path

def genDefaultTraceFile(config, refDir, binary=True ,listOfExpr=[]):
    res=[]
    for fileSym in refDir.glob("dd.sym.*"):
        for line in open(fileSym):
            objectVerrou=(line.strip()).split("\t")[1]
            if binary and (".so" not in objectVerrou and objectVerrou not in res):
                res+=[objectVerrou]
                continue
            for expr in listOfExpr:
                if fnmatch.fnmatch(objectVerrou, expr) and objectVerrou not in res:
                    res+=[objectVerrou]
                    break
    outputFileName=refDir / "defaultTrace"
    output=open(outputFileName,"w")
    for objectVerrou in res:
        output.write("*\t"+objectVerrou+"\n")
    output.close()
    return outputFileName


def getSortedPidList(rep):
    pidList=[(int((x.name).replace("trace_bb_cov.log-","")), x.stat().st_mtime) for x in  rep.glob("trace_bb_cov.log-*") if x.name !="trace_bb_cov.log-seqCount" ]
    sortedPidList=sorted(pidList, key=lambda x: x[1])
    return sortedPidList


def mapClean(rep, listOfFile, verbose):
    for fileName in listOfFile:
        pathName= rep / fileName
        if verbose:
            print("delete : ", pathName)
        pathName.unlink()

def mapRename(rep, pid, count, listOfFile,verbose):
    convList=[(x, x.replace(str(pid), "seqCount"+str(count))) for x in listOfFile]
    for (old,new) in convList:
        oldPath=rep / old
        newPath=rep / new
        if newPath.is_file():
            print("Problem with ", oldPath,newPath)

        if verbose:
            print(oldPath , " => " , newPath)
        oldPath.rename(newPath)


def rename_pid_for_one_rep(rep, what="cover", clean=False, ignoreEmpty=True,verbose=False):
    pidList=getSortedPidList(rep)
    count=0
    convList=[]
    for pidTuple in pidList:
        pid=pidTuple[0]
        coverOldFileList=[x.name for x in rep.glob("cover*-"+str(pid))]
        otherOldFileList=[x.name for x in list(rep.glob("trace_bb_cov.log-"+str(pid)))+
                                          list(rep.glob("trace_bb_info.log-"+str(pid)))]

        if ignoreEmpty:
            fileName="trace_bb_info.log-"+str(pid)
            pathFile=rep / fileName
            if  fileName in  otherOldFileList and (pathFile.stat()).st_size==0:
                if clean:
                    mapClean(rep,otherOldFileList+coverOldFileList, verbose)
                continue

        if what=="all":
            mapRename(rep,pid,count, coverOldFileList, verbose)
            mapRename(rep,pid,count, otherOldFileList, verbose)

        if what=="cover":
            mapRename(rep,pid,count, coverOldFileList, verbose)
            if clean:
                mapClean(rep,otherOldFileList,verbose)
        count+=1



def postRunTrace(runDir):
    globListOfTraceBBFile=runDir.glob("cover/trace_bb_cov.log*")

    listOfTraceBBFile=[]
    log=""
    for traceBBFile in globListOfTraceBBFile:
        traceInfo=traceBBFile.with_name( (traceBBFile.name).replace("cov","info"))
        if (traceInfo.stat()).st_size!=0:
            listOfTraceBBFile+=[traceBBFile]
        else:
            log+="traceBBFile %s ignored\n"%(traceBBFile)
    if log!="":
        with open(runDir / "covBBLog", "w") as f:
            f.write(log)

    if len(listOfTraceBBFile)==0:
        print("Problem in trace generation detected: %s",runDir)
        sys.exit(42)

    cmd="genCovBB --genCov %s"%(" ".join([str(x) for x in listOfTraceBBFile]))
    os.system(cmd+ "  >> %s"%( runDir/ "covBBLog"))
    rename_pid_for_one_rep(runDir / "cover",what="cover", clean=True, ignoreEmpty=True)


def preRunTrace(runDir, env):
    coverRep=runDir / "cover"
    coverRep.mkdir()
    env["VERROU_OUTPUT_TRACE_REP"]=coverRep

def runOneConfig(config, refDir, outputDir, envvars, nbRun, traceFile=None):
    runScript=config.get_runScript()
    cmpScript=config.get_cmpScript()

    seedTab=None
    if config.seed!=None:
        import random
        random.seed(config.seed)
        seedTab=random.sample(range(0,2**32-1), config.get_nbRUN())

    if traceFile!=None:
        envvars["VERROU_TRACE"]=traceFile

    task=DD_stoch.stochTask(outputDir, refDir,runScript, cmpScript, envvars , seedTab=seedTab, seedEnvVar="VERROU_SEED")
    task.setNbRun(nbRun)
    if config.get_trace():
        task.setPreRun(preRunTrace)
        task.setPostRun(postRunTrace)

    DD_stoch.runMultipleStochTask([task],config.get_maxNbPROC())



def runSubRepForOneInstr( config, rep, refDir,ddMinList):

    instrList=config.get_instr()

    refNewDir=refDir
    traceFile=None
    if config.get_trace():
        traceFile=config.get_trace_file()
        if traceFile==None:
            traceFile=genDefaultTraceFile(config, refDir,
                                          config.get_trace_bin(),
                                          config.get_trace_pattern())
        refNewDir=refNewDir.with_name( refNewDir.name+"-trace")




    for ddmin in ddMinList:

        ddminNew=ddmin
        if config.get_trace():
            ddminNew=ddminNew.with_name( ddminNew.name+"-trace")

        for instr in instrList:
            ddminNewInstr=ddminNew.with_name( ddminNew.name+"-"+instr)
            if instr=="":
                ddminNewInstr=ddminNew

            if ddmin.name=="ref":
                runEnv={}
            else:
                runEnv={"VERROU_SOURCE": ddmin / "dd.line.include",
                        "VERROU_WARN_UNKNOWN_SOURCE": ddmin / "dd.line.exclude"}
            if instr!="":
                runEnv["VERROU_INSTR"]= instr

            ddminNewInstr.mkdir(exist_ok=True)

            roundNonDetTab=config.getNonDetTab()
            roundDetTab=config.getDetTab()
            nbRun=config.get_nbRUN()
            if ddmin.name=="NoPerturbation":
                roundNonDetTab=[""]
                nbRun=1
                roundDetTab=[]
            runEnvSav=copy.deepcopy(runEnv)
            for rounding in roundNonDetTab:
                newNbRun=nbRun
                if rounding=="":
                    ddminNewRep=ddminNewInstr / "default"
                    if ddmin.name=="ref":
                        ddminNewRep=ddminNewInstr / "nearest"
                        runEnv=rounding_tool.roundingToEnvVar("nearest",runEnvSav)
                        newNbRun=1
                else:
                    ddminNewRep=ddminNewInstr / rounding
                    runEnv=rounding_tool.roundingToEnvVar(rounding,runEnvSav)

                ddminNewRep.mkdir(exist_ok=True)

                runOneConfig(config, refDir, ddminNewRep, runEnv, newNbRun, traceFile)

            if len(roundDetTab)!=0:
                ddminNewRep=ddminNewInstr / "det"
                ddminNewRep.mkdir(exist_ok=True)

                for det in roundDetTab:
                    runEnv=rounding_tool.roundingToEnvVar(det,runEnvSav)
                    if instr!="":
                        runEnv["VERROU_INSTR"]=instr

                    if config.get_count_denorm():
                        if rounding_tool.isRoundingCompatibleWithDenorm(det):
                            runEnv["VERROU_COUNT_DENORM"]="yes"

                    detRep=ddminNewRep/ det
                    detRep.mkdir(exist_ok=True)
                    runOneConfig(config, refDir, detRep, runEnv, 1, traceFile)

def sortSubRep(subRepTab):
    refTab=[x for x in subRepTab if x.name in ["ref","NoPerturbation"] ]
    ddminTab=[x for x in subRepTab if (x.name).startswith("ddmin")]
    otherTab=[x for x in subRepTab if (not x.name in refTab) and (not x in ddminTab)]

    ddminWithKeySort=[]
    for ddmin in ddminTab:
        try:
            xi=int((ddmin.name).replace("ddmin",""))
            ddminWithKeySort+=[(ddmin, xi)]
        except:
            otherTab+=ddmin

    ddminTab=[ddmin[0] for ddmin in sorted(ddminWithKeySort, key=lambda x:x[1])]
    res=sorted(refTab) + ddminTab + sorted(otherTab)

    return res


if __name__=="__main__":
    config=post_config.postConfig(sys.argv,os.environ)

    repSubRep=config.get_rep_sub_rep()
    print("selected sub_rep to postreat:")
    for rep in sorted(repSubRep.keys()):
        ddMinList=sortSubRep(repSubRep[rep])
        for ddmin in ddMinList:
            print("\t", ddmin.relative_to(Path.cwd()) )
    for rep in sorted(repSubRep.keys()):
        ddMinList=sortSubRep(repSubRep[rep])
        refDir=(rep / "ref").absolute()
        runSubRepForOneInstr(config, rep, refDir, ddMinList)
