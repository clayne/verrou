#!/usr/bin/python3

import sys

includePatternHard="""
            if(!vr.float_conv){
#define bcName(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConv(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConvWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
            }else{
#define bcName(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConv(OP) "vr_conv_verrou_ROUNDING"#OP, vr_conv_verrou_ROUNDING##OP
#define bcNameConvWithCC(OP) "vr_conv_verrou_ROUNDING"#OP, vr_conv_verrou_ROUNDING##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
           }
"""

includePatternSoft="""
            if(!vr.float_conv){
#define bcName(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#define bcNameConv(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#define bcNameConvWithCC(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
           }else{
#define bcName(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING_soft"#OP, vr_verrou_ROUNDING_soft##OP
#define bcNameConv(OP) "vr_conv_verrou_ROUNDING_soft"#OP, vr_conv_verrou_ROUNDING_soft##OP
#define bcNameConvWithCC(OP) "vr_conv_verrou_ROUNDING_soft"#OP, vr_conv_verrou_ROUNDING_soft##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
           }
"""

includePatternSoftNearest="""
            if(!vr.float_conv){
#define bcName(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConv(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConvWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
           }else{
#define bcName(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameWithCC(OP) "vr_verrou_ROUNDING"#OP, vr_verrou_ROUNDING##OP
#define bcNameConv(OP) "vr_conv_verrou_ROUNDING_soft"#OP, vr_conv_verrou_ROUNDING_soft##OP
#define bcNameConvWithCC(OP) "vr_conv_verrou_ROUNDING_soft"#OP, vr_conv_verrou_ROUNDING_soft##OP
#include "vr_instrumentOp_impl.h"
#undef bcName
#undef bcNameWithCC
#undef bcNameConv
#undef bcNameConvWithCC
           }
"""



def generate(fileName,roundingList):
    handler=open(fileName,"w")
    handler.write("// Generated by %s\n"%( str(sys.argv)[1:-1] ))

    for rounding in roundingList:
        roundingMode=rounding[0]
        checkStr="if(vr.roundingMode==VR_"+roundingMode
        for checkRounding in rounding[1:]:
            checkStr+= " ||  vr.roundingMode==VR_" +checkRounding
        checkStr+="){"

        includeMacroHard=includePatternHard.replace("ROUNDING",roundingMode)
        includeMacroSoft=includePatternSoft.replace("ROUNDING",roundingMode)
        if roundingMode=="NEAREST":
            includeMacroSoft=includePatternSoftNearest.replace("ROUNDING",roundingMode)

        includeMacro="""
\tif(vr.instrument_soft_used){""" + includeMacroSoft+"\t}else{"+includeMacroHard+"\t}\n"       
        strWrite=checkStr + includeMacro+ "}\n"
#        if roundingMode=="NEAREST":
#            strWrite=checkStr + includePatternHard.replace("ROUNDING",roundingMode)+"}\n"
#        print(strWrite)
        handler.write(strWrite)


if __name__=="__main__":
    roundingList=[["NEAREST","NATIVE"],
                  ["RANDOM"], ["AVERAGE"],
                  ["RANDOM_DET"],["AVERAGE_DET"],
                  ["RANDOM_COMDET"],["AVERAGE_COMDET"],
                  ["RANDOM_SCOMDET"],["AVERAGE_SCOMDET"],
                  ["SR_MONOTONIC"],["SR_SMONOTONIC"],
                  ["UPWARD"],["DOWNWARD"],["ZERO"],
                  ["AWAY_ZERO"],["FARTHEST"],["FLOAT"],
                  ["PRANDOM"], ["PRANDOM_DET"], ["PRANDOM_COMDET"]
                  ]
    fileName="vr_instrumentOp_impl_generated.h"
    generate(fileName,roundingList)
